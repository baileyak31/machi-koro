{"version":3,"sources":["components/Establishment.js","establishments.js","utils.js","components/BankEstablishmentPiles.js","components/Dice.js","components/PhaseIndicator.js","components/LandmarkPile.js","components/Landmark.js","landmarks.js","components/PlayerLandmarkRow.js","components/Player.js","api.js","components/Game.js","components/GameRoom.js","components/Home.js","components/GameNotFound.js","App.js","serviceWorker.js","index.js"],"names":["Establishment","title","color","industry","activationNum","cost","description","cssClassName","className","length","industries","establishmentColors","establishmentNames","establishmentCosts","establishmentActivationNums","wheatField","ranch","bakery","cafe","convenienceStore","forest","stadium","tvStation","businessCenter","cheeseFactory","furnitureFactory","mine","familyRestaurant","appleOrchard","farmersMarket","makeEstablishmentTransaction","gameState","establishment","onBlueEstablishmentActivated","onGreenEstablishmentActivated","onRedEstablishmentActivated","onPurpleEstablishmentActivated","playerCoins","owner","getRevenue","shoppingMallComplete","activePlayer","exchangeCoinsBetweenPlayers","establishments","onStadiumActivated","onTvStationActivated","onBusinessCenterActivated","Object","entries","forEach","pair","player","turnPhase","turnPhases","choosePlayerToStealCoinsFrom","chooseEstablishmentToSteal","payingPlayer","actualExchangeAmount","Math","min","revenue","getRevenueMultiplier","activatedEstablishment","dependingIndustry","playerEstablishments","filter","name","sortOrder","render","establishmentLookupTable","establishmentList","establishmentTotals","getPlayerNumberFromIndex","index","parseInt","splitListIntoSublistsWithMaxLength","rowLength","Array","from","ceil","_","i","slice","BankEstablishmentPiles","thisPlayersTurn","activePlayerCoinCount","onBuyButtonClick","establishmentCounts","keys","key","map","row","rowIndex","colIndex","disabled","construction","onClick","Dice","diceCount","setDiceCount","onDiceRoll","trainStationActivated","firstDieValue","secondDieValue","currentPhase","rollDie","floor","random","id","type","value","checked","rollDice","onChange","rollTwoDice","firstDieResult","makeRoll","secondDieResult","PhaseIndicator","allPlayerCoins","allPlayerEstablishments","currentTurnPhase","endTurn","repeatingTurn","onAcceptReroll","onDeclineReroll","onStealeeChosen","onEstablishmentsToTradeChosen","useState","playerEstablishmentToTrade","setPlayerEstablishmentToTrade","opponentEstablishmentToTrade","setOpponentEstablishmentToTrade","messages","decideToReroll","earnIncome","mayRerollDice","shouldDisplaySkipButton","shouldDisplayRolledDoublesMessage","shouldDisplayPlayersToStealFrom","shouldDisplayEstablishmentsToSteal","message","establishmentMap","playerIndex","onOpponentEstablishmentToTradeChanged","event","target","split","establishmentName","onPlayerEstablishmentToTradeChanged","getPlayerEstablishmentRendering","count","coins","LandmarkPile","landmarksCompleted","landmark","landmarkIsComplete","includes","Landmark","landmarks","trainStation","shoppingMall","amusementPark","radioTower","PlayerLandmarkRow","Player","sort","a","b","console","log","undefined","socket","openSocket","emitGameStateChanged","emit","unsubscribeFromLaunchGameRoom","off","unsubscribeFromGameStateChanged","changeGameState","changedItems","setterMap","emitChangeInState","itemName","newValue","setter","Game","thisPlayerIndex","playerCount","endGame","setActivePlayer","setFirstDieValue","setSecondDieValue","setTurnPhase","fill","setPlayerCoins","setRepeatingTurn","activePlayerHasNotRerolledThisTurn","setActivePlayerHasNotRerolledThisTurn","setPlayerEstablishments","setLandmarksCompleted","activatedEstablishments","setActivatedEstablishments","useEffect","callback","on","newGameState","bankCoins","reduce","activePlayerCompletedRadioTower","beginEarnIncomePhase","newRoll","newActivatedEstablishments","gatherActivatedEstablishments","performTransactionsOnActivatedEstablishments","activatedEstablishmentsByColor","ownedEstablishments","push","concat","newState","card","pop","newActivePlayer","replacePlayerEstablishment","newPlayerEstablishments","establishmentOwned","establishmentReceiving","establishmentOwnedIndex","findIndex","splice","buyEstablishment","stealeeIndex","activePlayerEstablishment","opponentEstablishment","opponentIndex","newRepeatingTurn","buyLandmark","GameRoom","roomId","useParams","winner","setWinner","setThisPlayerIndex","gameNotFound","setGameNotFound","gameInProgress","setGameInProgress","gameRoomJoined","setGameRoomJoined","currentPlayerCount","setCurrentPlayerCount","subscribeToGameRoomJoinFailed","subscribeToChangeInGameRoomPlayers","playersInRoom","socketId","subscribeToGameStarted","emitJoinGameRoom","winnerDeclared","to","emitStartGame","Home","setRoomId","launchGameRoom","history","useHistory","placeholder","GameNotFound","App","path","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"yQA4BeA,EA1BO,SAAC,GAOhB,IANLC,EAMI,EANJA,MACAC,EAKI,EALJA,MACAC,EAII,EAJJA,SACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,KACAC,EACI,EADJA,YAEMC,EAAY,uBAAmBL,GACrC,OACE,yBAAKM,UAAWD,GACd,6BACE,2BAAIN,IAEN,0CAAgBE,GAChB,6BACGC,EAAcK,OAAS,EACpB,uBAAyBL,EAAc,GAAK,IAAMA,EAAc,GAChE,sBAAwBA,EAAc,IAE5C,sCAAYC,GACZ,6BAAMC,KCnBNI,EACC,aADDA,EAEG,QAFHA,EAGC,MAHDA,EAIG,QAJHA,EAKC,MALDA,EAME,OANFA,EAOG,QAPHA,EAQK,UARLA,EASG,QAGHC,EACC,MADDA,EAEE,OAFFA,EAGG,QAHHA,EAII,SAGJC,EACQ,cADRA,EAEG,QAFHA,EAGI,SAHJA,EAIE,OAJFA,EAKc,oBALdA,EAMI,SANJA,EAOK,UAPLA,EAQO,aARPA,EASY,kBATZA,EAUW,iBAVXA,EAWc,oBAXdA,EAYE,OAZFA,EAac,oBAbdA,EAcU,gBAdVA,EAeW,iBAGXC,EACQ,EADRA,EAEG,EAFHA,EAGI,EAHJA,EAIE,EAJFA,EAKc,EALdA,EAMI,EANJA,EAOK,EAPLA,EAQO,EARPA,EASY,EATZA,EAUW,EAVXA,EAWc,EAXdA,EAYE,EAZFA,EAac,EAbdA,GAcU,EAdVA,GAeW,EAGXC,GAA8B,CAClCC,WAAY,CAAC,GACbC,MAAO,CAAC,GACRC,OAAQ,CAAC,EAAG,GACZC,KAAM,CAAC,GACPC,iBAAkB,CAAC,GACnBC,OAAQ,CAAC,GACTC,QAAS,CAAC,GACVC,UAAW,CAAC,GACZC,eAAgB,CAAC,GACjBC,cAAe,CAAC,GAChBC,iBAAkB,CAAC,GACnBC,KAAM,CAAC,GACPC,iBAAkB,CAAC,EAAG,IACtBC,aAAc,CAAC,IACfC,cAAe,CAAC,GAAI,KAGhBC,GAA+B,SAACC,EAAWC,GAC/C,OAAQA,EAAc9B,OACpB,KAAKS,EACH,OAAOsB,GAA6BF,EAAWC,GACjD,KAAKrB,EACH,OAAOuB,GAA8BH,EAAWC,GAClD,KAAKrB,EACH,OAAOwB,GAA4BJ,EAAWC,GAChD,KAAKrB,EACH,OAAOyB,GAA+BL,EAAWC,GACnD,QACE,OAAOD,IAIPE,GAA+B,SAACF,EAAWC,GAK/C,OAJAD,EAAUM,YAAYN,EAAUO,QAAUC,GACxCP,EACAD,EAAUS,sBAELT,GAGHG,GAAgC,SAACH,EAAWC,GAQhD,OAPID,EAAUU,eAAiBV,EAAUO,QACvCP,EAAUM,YAAYN,EAAUO,QAAUC,GACxCP,EACAD,EAAUS,qBACVT,IAGGA,GAGHI,GAA8B,SAACJ,EAAWC,GAQ9C,OAPID,EAAUU,eAAiBV,EAAUO,OACvCI,GACEX,EACAC,EACAD,EAAUU,cAGPV,GAGHK,GAAiC,SAACL,EAAWC,GACjD,GAAID,EAAUU,eAAiBV,EAAUO,MACvC,OAAQN,GACN,KAAKW,GAAetB,QAClB,OAAOuB,GAAmBb,EAAWC,GACvC,KAAKW,GAAerB,UAClB,OAAOuB,GAAqBd,GAC9B,KAAKY,GAAepB,eAClB,OAAOuB,GAA0Bf,GACnC,QACE,OAAO,KAGb,OAAOA,GAGHa,GAAqB,SAACb,EAAWC,GAOrC,OANAe,OAAOC,QAAQjB,EAAUM,aAAaY,SAAQ,SAACC,GAC7C,IAAMC,EAASD,EAAK,GAChBC,IAAWpB,EAAUO,QACvBP,EAAYW,GAA4BX,EAAWC,EAAemB,OAG/DpB,GAGHc,GAAuB,SAACd,GAE5B,OADAA,EAAUqB,UAAYC,GAAWC,6BAC1BvB,GAGHe,GAA4B,SAACf,GAEjC,OADAA,EAAUqB,UAAYC,GAAWE,2BAC1BxB,GAGHW,GAA8B,SAClCX,EACAC,EACAwB,GAEA,IAAMC,EAAuBC,KAAKC,IAChCpB,GAAWP,EAAeD,EAAUS,sBACpCT,EAAUM,YAAYmB,IAIxB,OAFAzB,EAAUM,YAAYmB,IAAiBC,EACvC1B,EAAUM,YAAYN,EAAUO,QAAUmB,EACnC1B,GAGHQ,GAAa,SAACP,EAAeQ,GAA0C,IAApBT,EAAmB,uDAAP,GACnE,OACEC,EAAc4B,QAAUC,GAAqB7B,EAAeD,IAC1DC,EAAc7B,WAAaO,GAC3BsB,EAAc7B,WAAaO,IAC7B8B,EAEI,EADA,IAKFqB,GAAuB,SAACC,EAAwB/B,GACpD,OACEA,IAAc,IACd+B,EAAuBC,oBAAsBrD,EAEVqB,EAAUiC,qBAC3CjC,EAAUO,OACV2B,QACA,SAACjC,GAAD,OACEA,EAAc7B,WAAa2D,EAAuBC,qBACpDtD,OAGG,GAGHkC,GAAiB,CACrB5B,WAAY,CACVmD,KAAMtD,EACNR,cAAeU,GAA4BC,WAC3CV,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEnE,MAAOW,EACPR,cAAeU,GAA4BC,WAC3Cb,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,+CAKlBU,MAAO,CACLkD,KAAMtD,EACNR,cAAeU,GAA4BE,MAC3CX,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEnE,MAAOW,EACPR,cAAeU,GAA4BE,MAC3Cd,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,+CAKlBW,OAAQ,CACNiD,KAAMtD,EACNR,cAAeU,GAA4BG,OAC3CZ,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEnE,MAAOW,EACPR,cAAeU,GAA4BG,OAC3Cf,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,gDAKlBY,KAAM,CACJgD,KAAMtD,EACNR,cAAeU,GAA4BI,KAC3Cb,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BI,KAC3CjB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,2DAKlBa,iBAAkB,CAChB+C,KAAMtD,EACNR,cAAeU,GAA4BK,iBAC3Cd,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BK,iBAC3ClB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,iDAKlBc,OAAQ,CACN8C,KAAMtD,EACNR,cAAeU,GAA4BM,OAC3Cf,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BM,OAC3CnB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,+CAKlBe,QAAS,CACP6C,KAAMtD,EACNR,cAAeU,GAA4BO,QAC3ChB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BO,QAC3CpB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,oDAKlBgB,UAAW,CACT4C,KAAMtD,EACNR,cAAeU,GAA4BQ,UAC3CjB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BQ,UAC3CrB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,wDAKlBiB,eAAgB,CACd2C,KAAMtD,EACNR,cAAeU,GAA4BS,eAC3ClB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BS,eAC3CtB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAW,wBAAmBI,EAAnB,2DAKjBc,cAAe,CACb0C,KAAMtD,EACNR,cAAeU,GAA4BU,cAC3CnB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,EACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BU,cAC3CvB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAW,6CAAwCI,EAAxC,oDAKjBe,iBAAkB,CAChByC,KAAMtD,EACNR,cAAeU,GAA4BW,iBAC3CpB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,GACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BW,iBAC3CxB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAW,6CAAwCI,EAAxC,oDAKjBgB,KAAM,CACJwC,KAAMtD,EACNR,cAAeU,GAA4BY,KAC3CrB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,GACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4BY,KAC3CzB,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,gDAKlBqB,iBAAkB,CAChBuC,KAAMtD,EACNR,cAAeU,GAA4Ba,iBAC3CtB,KAAMQ,EACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,GACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4Ba,iBAC3C1B,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,EACNP,YAAY,4DAKlBsB,aAAc,CACZsC,KAAMtD,EACNR,cAAeU,GAA4Bc,aAC3CvB,KAAMQ,GACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,GACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4Bc,aAC3C3B,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,GACNP,YAAY,gDAKlBuB,cAAe,CACbqC,KAAMtD,EACNR,cAAeU,GAA4Be,cAC3CxB,KAAMQ,GACNV,SAAUO,EACVR,MAAOS,EACPiD,QAAS,EACTG,kBAAmBrD,EACnByD,UAAW,GACXC,OACE,kBAAC,EAAD,CACEhE,cAAeU,GAA4Be,cAC3C5B,MAAOW,EACPV,MAAOS,EACPR,SAAUO,EACVL,KAAMQ,GACNP,YAAW,6CAAwCI,EAAxC,qDAMb2D,IAAwB,mBAC3B1B,GAAe5B,WAAWmD,KAAOvB,GAAe5B,YADrB,cAE3B4B,GAAe3B,MAAMkD,KAAOvB,GAAe3B,OAFhB,cAG3B2B,GAAe1B,OAAOiD,KAAOvB,GAAe1B,QAHjB,cAI3B0B,GAAezB,KAAKgD,KAAOvB,GAAezB,MAJf,cAK3ByB,GAAexB,iBAAiB+C,KAAOvB,GAAexB,kBAL3B,cAM3BwB,GAAevB,OAAO8C,KAAOvB,GAAevB,QANjB,cAO3BuB,GAAetB,QAAQ6C,KAAOvB,GAAetB,SAPlB,cAQ3BsB,GAAerB,UAAU4C,KAAOvB,GAAerB,WARpB,cAS3BqB,GAAepB,eAAe2C,KAAOvB,GAAepB,gBATzB,cAU3BoB,GAAenB,cAAc0C,KAAOvB,GAAenB,eAVxB,cAW3BmB,GAAelB,iBAAiByC,KAAOvB,GAAelB,kBAX3B,cAY3BkB,GAAejB,KAAKwC,KAAOvB,GAAejB,MAZf,cAa3BiB,GAAehB,iBAAiBuC,KAAOvB,GAAehB,kBAb3B,cAc3BgB,GAAef,aAAasC,KAAOvB,GAAef,cAdvB,cAe3Be,GAAed,cAAcqC,KAAOvB,GAAed,eAfxB,GAkBxByC,GAAoB,CACxB3B,GAAe5B,WACf4B,GAAe3B,MACf2B,GAAe1B,OACf0B,GAAezB,KACfyB,GAAexB,iBACfwB,GAAevB,OACfuB,GAAetB,QACfsB,GAAerB,UACfqB,GAAepB,eACfoB,GAAenB,cACfmB,GAAelB,iBACfkB,GAAejB,KACfiB,GAAehB,iBACfgB,GAAef,aACfe,GAAed,eAGX0C,IAAmB,mBACtB5B,GAAe5B,WAAWmD,KAAO,IADX,cAEtBvB,GAAe3B,MAAMkD,KAAO,GAFN,cAGtBvB,GAAe1B,OAAOiD,KAAO,GAHP,cAItBvB,GAAezB,KAAKgD,KAAO,GAJL,cAKtBvB,GAAexB,iBAAiB+C,KAAO,GALjB,cAMtBvB,GAAevB,OAAO8C,KAAO,GANP,cAOtBvB,GAAetB,QAAQ6C,KAAO,GAPR,cAQtBvB,GAAerB,UAAU4C,KAAO,GARV,cAStBvB,GAAepB,eAAe2C,KAAO,GATf,cAUtBvB,GAAenB,cAAc0C,KAAO,GAVd,cAWtBvB,GAAelB,iBAAiByC,KAAO,GAXjB,cAYtBvB,GAAejB,KAAKwC,KAAO,GAZL,cAatBvB,GAAehB,iBAAiBuC,KAAO,GAbjB,cActBvB,GAAef,aAAasC,KAAO,GAdb,cAetBvB,GAAed,cAAcqC,KAAO,GAfd,GCxiBnBM,GAA2B,SAACC,GAAD,OAAWC,SAASD,GAAS,GAExDE,GAAqC,SAACL,EAAmBM,GAApB,OACzCC,MAAMC,KAAKD,MAAMnB,KAAKqB,KAAKT,EAAkB7D,OAASmE,KAAa,SAACI,EAAGC,GAAJ,OACjEX,EAAkBY,MAAMD,EAAIL,EAAWK,EAAIL,EAAYA,OC+C5CO,GA9CgB,SAAC,GAMzB,IALLC,EAKI,EALJA,gBACAC,EAII,EAJJA,sBACArB,EAGI,EAHJA,qBACAZ,EAEI,EAFJA,UACAkC,EACI,EADJA,iBAEMC,EAAsB,GAU5B,OATAxC,OAAOyC,KAAKjB,IAAqBtB,SAC/B,SAACwC,GAAD,OAAUF,EAAoBE,GAAOlB,GAAoBkB,MAE3DzB,EAAqBf,SAAQ,SAACN,GAC5BA,EAAeM,SAAQ,SAACjB,GACtBuD,EAAoBvD,EAAckC,cAKpC,oCACGS,GAAmCL,GAAmB,GAAGoB,KACxD,SAACC,EAAKC,GAAN,OACE,yBAAKH,IAAKG,EAAUpF,UAAU,OAC3BmF,EAAID,KAAI,SAAC1D,EAAe6D,GAAhB,OACP,yBAAKJ,IAAKI,EAAUrF,UAAU,UAC3BwB,EAAcoC,OACf,uCAAamB,EAAoBvD,EAAckC,OAC/C,4BACE4B,SACE1C,IAAcC,GAAW0C,cACzBV,EAAwBrD,EAAc3B,MACtCkF,EAAoBvD,EAAckC,OAAS,IAC1CkB,EAEHY,QAAS,kBAAMV,EAAiBtD,KAPlC,OASOA,EAAckC,gBCgCtB+B,GArEF,SAAC,GASP,IARLb,EAQI,EARJA,gBACAc,EAOI,EAPJA,UACAC,EAMI,EANJA,aACAC,EAKI,EALJA,WACAC,EAII,EAJJA,sBACAC,EAGI,EAHJA,cACAC,EAEI,EAFJA,eACAC,EACI,EADJA,aAEMC,EAAU,kBAAM,EAAI/C,KAAKgD,MAAsB,EAAhBhD,KAAKiD,WAgB1C,OACE,oCACE,oCACA,2BACEC,GAAG,QACHC,KAAK,QACLC,MAAO,EACPC,QAAuB,IAAdb,EACTJ,SAAUU,IAAiBnD,GAAW2D,WAAa5B,EACnD6B,SAAU,kBAAMd,EAAa,MARjC,IAWE,2BACES,GAAG,QACHC,KAAK,QACLC,MAAO,EACPC,QAAuB,IAAdb,EACTJ,SACEU,IAAiBnD,GAAW2D,WAC3BX,IACAjB,EAEH6B,SAAU,kBAAMd,EAAa,MArBjC,IAwBE,2CACc,IACQ,IAAnBI,EACGD,EADH,UAEMA,EAFN,cAEyBC,EAFzB,cAGKD,EAAgBC,IAGxB,4BACET,SAAUU,IAAiBnD,GAAW2D,WAAa5B,EACnDY,QAxCsB,WAAO,IAAD,EATjB,SAACkB,GAChB,IAAMC,EAAiBV,IACvB,OAAKS,EAIE,CAACC,EADgBV,KAFf,CAACU,EAAgB,GAOgBC,CAAuB,IAAdlB,GADnB,mBACzBiB,EADyB,KACTE,EADS,KAEhCjB,EAAWe,EAAgBE,KAoCzB,UC8ISC,GAhMQ,SAAC,GAYjB,IAXLlC,EAWI,EAXJA,gBACAmC,EAUI,EAVJA,eACAC,EASI,EATJA,wBACA/E,EAQI,EARJA,aACAgF,EAOI,EAPJA,iBACAC,EAMI,EANJA,QACAC,EAKI,EALJA,cACAC,EAII,EAJJA,eACAC,EAGI,EAHJA,gBACAC,EAEI,EAFJA,gBACAC,EACI,EADJA,8BACI,EACgEC,mBAAS,EAC1E,EACDrF,GAAe5B,aAHb,mBACGkH,EADH,KAC+BC,EAD/B,OAQAF,mBAAS,EAAE,EAAGrF,GAAe5B,aAR7B,mBAMFoH,EANE,KAOFC,EAPE,KAUEC,EAAW,GACjBA,EAAShF,GAAW2D,UAAY,qBAChCqB,EAAShF,GAAWiF,gBAClB,mFACFD,EAAShF,GAAWkF,YAAc,uBAClCF,EACEhF,GAAWC,8BADb,4DAEyDX,GAAerB,UAAUsC,QAFlF,gBAGAyE,EAAShF,GAAWE,4BAClB,0FACF8E,EAAShF,GAAW0C,cAClB,uDAEF,IAAMyC,EAAgBf,IAAqBpE,GAAWiF,eAChDG,EACJhB,IAAqBpE,GAAW0C,cAAgBX,EAC5CsD,EACJjB,IAAqBpE,GAAW0C,cAAgB4B,EAC5CgB,EACJlB,IAAqBpE,GAAWC,8BAChC8B,EACIwD,EACJnB,IAAqBpE,GAAWE,4BAChC6B,EACIyD,EAAUR,EAASZ,GACnBqB,EAAmB,GAEzBtB,EAAwBvE,SAAQ,SAACN,EAAgBoG,GAC/CD,EAAiBC,GAAe,GAChCpG,EAAeM,SACb,SAACjB,GAAD,OAAoB8G,EAAiBC,GAAa/G,EAAckC,MAAQ,KAE1EvB,EAAeM,SACb,SAACjB,GAAD,OAAmB8G,EAAiBC,GAAa/G,EAAckC,cAInE,IAAM8E,EAAwC,SAACC,GAC7C,IAAM/F,EAAO+F,EAAMC,OAAOpC,MAAMqC,MAAM,KAChCJ,EAAcrE,SAASxB,EAAK,IAC5BkG,EAAoBlG,EAAK,GAC/BkF,EAAgC,CAC9BW,EACA1E,GAAyB+E,MAIvBC,EAAsC,SAACJ,GAC3C,IAAMG,EAAoBH,EAAMC,OAAOpC,MAAMqC,MAAM,KAAK,GACxDjB,EAA8B,CAC5BzF,EACA4B,GAAyB+E,MAIvBE,EAAkC,SAACP,GACvC,OAAOpE,GACL5B,OAAOC,QAAQ8F,EAAiBC,IAChC,GACArD,KAAI,SAACC,EAAKC,GAAN,OACJ,yBAAKH,IAAKG,GACPD,EAAID,KAAI,SAACxC,GACR,IAAMkG,EAAoBlG,EAAK,GACzBqG,EAAQrG,EAAK,GACblB,EAAgBqC,GAAyB+E,GACzCrC,EACJgC,IAAgBtG,EACZT,IAAkBiG,EAA2B,GAC7Cc,IAAgBZ,EAA6B,IAC7CnG,IAAkBmG,EAA6B,GAErD,OAAIoB,EAAQ,GAAKvH,EAAc7B,WAAaO,EAExC,yBAAK+E,IAAK2D,EAAmB5I,UAAU,OACrC,2BACEoG,GAAIwC,EACJvC,KAAK,QACLC,MAAOiC,EAAc,IAAMK,EAC3BrC,QAASA,EACTE,SACExE,IAAiBsG,EACbM,EACAL,IAGPI,EACD,yBAAK5I,UAAU,OAAf,UAA6B+I,IAK5B,aAMf,OACE,oCACE,sCAAY/E,GAAyB/B,GAArC,WACA,4BAAKoG,GACJF,GACC,yBAAKnI,UAAU,OACZ+G,EAAe7B,KAAI,SAACrD,EAAa0G,GAChC,OAAIA,IAAgBtG,EAEhB,yBAAKjC,UAAU,SAASiF,IAAKsD,GAA7B,UACUvE,GAAyBuE,GACjC,4BAAQ/C,QAAS,kBAAM8B,EAAgBiB,KAAvC,UAMC,SAIZH,GACC,oCACE,mDACCU,EAAgC7G,GAChC8E,EAAe7B,KAAI,SAAC8D,EAAOT,GAC1B,OAAIA,IAAgBtG,EAEhB,yBAAKgD,IAAKsD,GACR,sCACUvE,GAAyBuE,GADnC,qBAICO,EAAgCP,IAIhC,QAET,4BACE/C,QAAS,kBACP+B,EACEE,EAA2B,GAC3BE,EAA6B,GAC7BA,EAA6B,KAGjCrC,SAAUqC,EAA6B,GAAK,GAR9C,UAcHK,GACC,oCACE,mEACA,4BAAQxC,QAAS4B,GAAjB,OACA,4BAAQ5B,QAAS6B,GAAjB,OAGHa,GACC,8GAKDD,GACC,4BAAQzC,QAAS,kBAAM0B,MAAvB,UCnKO+B,GAhCM,SAAC,GASf,IARLrE,EAQI,EARJA,gBACAsE,EAOI,EAPJA,mBACAX,EAMI,EANJA,YACAY,EAKI,EALJA,SACArE,EAII,EAJJA,iBACA7C,EAGI,EAHJA,aACA+D,EAEI,EAFJA,aACAgD,EACI,EADJA,MAEMI,EAAqBF,EAAmBX,GAAac,SAASF,GAEpE,OACE,oCACGA,EAASvF,OACV,2CAAiBwF,EAAqB,MAAQ,MAC9C,4BACE5D,QAAS,kBAAMV,EAAiBqE,IAChC7D,SACEiD,IAAgBtG,GAChBmH,GACApD,IAAiBnD,GAAW0C,cAC5ByD,EAAQG,EAAStJ,OAChB+E,GAPL,OAUOuE,EAASzF,QCfP4F,GAZE,SAAC,GAAkC,IAAhC7J,EAA+B,EAA/BA,MAAOI,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YAC/B,OACE,yBAAKE,UAAU,YACb,6BACE,2BAAIP,IAEN,sCAAYI,GACZ,6BAAMC,KCMNyJ,GAAY,CAChBC,aAAc,CACZ9F,KAbqB,gBAcrB7D,KARqB,EASrB+D,OACE,kBAAC,GAAD,CACEnE,MAjBiB,gBAkBjBI,KAZiB,EAajBC,YAAY,+BAKlB2J,aAAc,CACZ/F,KAxBqB,gBAyBrB7D,KAnBqB,GAoBrB+D,OACE,kBAAC,GAAD,CACEnE,MA5BiB,gBA6BjBI,KAvBiB,GAwBjBC,YAAY,6DAKlB4J,cAAe,CACbhG,KAnCsB,iBAoCtB7D,KA9BsB,GA+BtB+D,OACE,kBAAC,GAAD,CACEnE,MAvCkB,iBAwClBI,KAlCkB,GAmClBC,YAAY,4DAKlB6J,WAAY,CACVjG,KA9CmB,cA+CnB7D,KAzCmB,GA0CnB+D,OACE,kBAAC,GAAD,CACEnE,MAlDe,cAmDfI,KA7Ce,GA8CfC,YAAY,4DCWL8J,GAlEW,SAAC,GAQpB,IAPLhF,EAOI,EAPJA,gBACA2D,EAMI,EANJA,YACAtG,EAKI,EALJA,aACAiH,EAII,EAJJA,mBACAlD,EAGI,EAHJA,aACAgD,EAEI,EAFJA,MACAlE,EACI,EADJA,iBAEA,OACE,oCACE,8CACA,yBAAK9E,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,GAAD,CACEuI,YAAaA,EACbtG,aAAcA,EACdkH,SAAUI,GAAUC,aACpBN,mBAAoBA,EACpBlD,aAAcA,EACdgD,MAAOA,EACPlE,iBAAkBA,EAClBF,gBAAiBA,KAGrB,yBAAK5E,UAAU,UACb,kBAAC,GAAD,CACEuI,YAAaA,EACbtG,aAAcA,EACdkH,SAAUI,GAAUE,aACpBP,mBAAoBA,EACpBlD,aAAcA,EACdgD,MAAOA,EACPlE,iBAAkBA,EAClBF,gBAAiBA,KAGrB,yBAAK5E,UAAU,UACb,kBAAC,GAAD,CACEuI,YAAaA,EACbtG,aAAcA,EACdkH,SAAUI,GAAUG,cACpBR,mBAAoBA,EACpBlD,aAAcA,EACdgD,MAAOA,EACPlE,iBAAkBA,EAClBF,gBAAiBA,KAGrB,yBAAK5E,UAAU,UACb,kBAAC,GAAD,CACEuI,YAAaA,EACbtG,aAAcA,EACdkH,SAAUI,GAAUI,WACpBT,mBAAoBA,EACpBlD,aAAcA,EACdgD,MAAOA,EACPlE,iBAAkBA,EAClBF,gBAAiBA,QCadiF,GAnEA,SAAC,GAUT,IATLjF,EASI,EATJA,gBACA2D,EAQI,EARJA,YACApG,EAOI,EAPJA,eACA4E,EAMI,EANJA,eACA9E,EAKI,EALJA,aACAiH,EAII,EAJJA,mBACAlD,EAGI,EAHJA,aACAgD,EAEI,EAFJA,MACAlE,EACI,EADJA,iBAEA3C,EAAe2H,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEpG,UAAYqG,EAAErG,aAE9C,IAAM2E,EAAmB,GAQzB,OAPAnG,EAAeM,SACb,SAACjB,GAAD,OAAoB8G,EAAiB9G,EAAckC,MAAQ,KAE7DvB,EAAeM,SACb,SAACjB,GAAD,OAAmB8G,EAAiB9G,EAAckC,WAIlD,oCACE,sCAAYM,GAAyBuE,IACrC,uCAAaxB,EAAewB,IAC5B,kBAAC,GAAD,CACEA,YAAaA,EACbtG,aAAcA,EACdiH,mBAAoBA,EACpBlD,aAAcA,EACdgD,MAAOA,EACPlE,iBAAkBA,EAClBF,gBAAiBA,IAEnB,mDACCT,GACC5B,OAAOC,QAAQ8F,GACf,GACApD,KAAI,SAACC,EAAKC,GAAN,OACJ,yBAAKH,IAAKG,EAAUpF,UAAU,OAC3BmF,EAAID,KAAI,SAACxC,GACR,IAAMkG,EAAoBlG,EAAK,GACzBqG,EAAQrG,EAAK,GASnB,OARAuH,QAAQC,IAAR,+BAC0BtB,EAD1B,qBACwDG,SAEJoB,IAAhDtG,GAAyB+E,IAC3BqB,QAAQC,IAAR,UACKtB,EADL,wDAIEG,EAAQ,EAER,yBAAK9D,IAAK2D,EAAmB5I,UAAU,UACpC6D,GAAyB+E,GAAmBhF,OAC7C,uCAAamF,IAIZ,c,SChEbqB,G,OAASC,GAAW,oBAAD,OADZ,MAmBPC,GAAuB,SAAC/I,GAC5B6I,GAAOG,KAAK,qBAAsBhJ,IAoC9BiJ,GAAgC,WACpCJ,GAAOK,IAAI,uBAmBPC,GAAkC,WACtCN,GAAOK,IAAI,uBC5DP5H,GAAa,CACjB2D,SAAU,EACVsB,eAAgB,EAChBC,WAAY,EACZxC,aAAc,EACdzC,6BAA8B,EAC9BC,2BAA4B,GAKxB4H,GAAkB,SAACC,EAAcC,GAAyC,IAA9BC,IAA6B,yDAC7EvI,OAAOC,QAAQoI,GAAcnI,SAAQ,SAACC,GACpC,IAAMqI,EAAWrI,EAAK,GAChBsI,EAAWtI,EAAK,GACtBuH,QAAQC,IAAR,mBAAwBa,EAAxB,eAAuCC,IACvC,IAAMC,EAASJ,EAAUE,QACVZ,IAAXc,IACFA,EAAOD,GACPf,QAAQC,IAAR,UAAea,EAAf,iBAGAD,GAAmBR,GAAqBM,IAGxCM,GAAO,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,gBAAiBC,EAA2B,EAA3BA,YAAaC,EAAc,EAAdA,QAAc,EAClB7D,mBAAS,GADS,mBACnDvF,EADmD,KACrCqJ,EADqC,OAEhB9D,mBAAS,GAFO,mBAEnD1B,EAFmD,KAEpCyF,EAFoC,OAGd/D,mBAAS,GAHK,mBAGnDzB,EAHmD,KAGnCyF,EAHmC,OAIxBhE,mBAAS3E,GAAW2D,UAJI,mBAInD5D,EAJmD,KAIxC6I,EAJwC,OAKpBjE,mBAASnD,MAAM+G,GAAaM,KAAK,IALb,mBAKnD7J,EALmD,KAKtC8J,EALsC,OAMxBnE,mBAAS,GANe,mBAMnD9B,EANmD,KAMxCC,EANwC,OAOhB6B,oBAAS,GAPO,mBAOnDL,EAPmD,KAOpCyE,EAPoC,OAWtDpE,oBAAS,GAX6C,mBASxDqE,EATwD,KAUxDC,EAVwD,OAYFtE,mBACtDnD,MAAM+G,GAAaM,KAAK,CAACvJ,GAAe5B,WAAY4B,GAAe1B,UAbX,mBAYnD+C,EAZmD,KAY7BuI,EAZ6B,OAeNvE,mBAClDnD,MAAM+G,GAAaM,KAAK,KAhBgC,mBAenDxC,EAfmD,KAe/B8C,EAf+B,OAkBIxE,mBAAS,IAlBb,mBAkBnDyE,GAlBmD,KAkB1BC,GAlB0B,KAoB1DC,qBAAU,WDVwB,IAACC,ECcjC,ODdiCA,ECWL,SAACxB,GAC3BD,GAAgBC,EAAcC,IAAW,IDX7CT,GAAOiC,GAAG,sBAAsB,SAACC,GAAD,OAAkBF,EAASE,MCalD5B,MAGT,IAAMG,GAAY,GAClBA,GAAS,aAAmBS,EAC5BT,GAAS,cAAoBU,EAC7BV,GAAS,eAAqBW,EAC9BX,GAAS,UAAgBY,EACzBZ,GAAS,YAAkBc,EAC3Bd,GAAS,UAAgBlF,EACzBkF,GAAS,cAAoBe,EAC7Bf,GAAS,mCAELiB,EACJjB,GAAS,qBAA2BkB,EACpClB,GAAS,mBAAyBmB,EAClCnB,GAAS,wBAA8BqB,GAEvC,IACMK,GADa,IACY1K,EAAY2K,QAAO,SAACzC,EAAGC,GAAJ,OAAUD,EAAIC,KAC1DyC,GAAkCvD,EACtCjH,GACAoH,SAASE,GAAUI,YACf3H,GAAuBkH,EAAmBjH,GAAcoH,SAC5DE,GAAUE,cAEN7E,GAAkBuG,IAAoBlJ,EA6DtCyK,GAAuB,SAACC,GAC5B,IAAMC,EAA6BC,GAA8BF,GAEjE,OAAOG,GACL,CACEjL,cACA2B,uBACAZ,UAAWC,GAAW0C,cAExBqH,IAIEC,GAAgC,SAACF,GAErC,IAAIC,EAA6B,GAC3BG,EAAiC,GAiCvC,OAhCAA,EAA+B5M,GAA2B,GAC1D4M,EAA+B5M,GAA4B,GAC3D4M,EAA+B5M,GAA6B,GAC5D4M,EAA+B5M,GAA8B,GAE7DqD,EAAqBf,SAAQ,SAACuK,EAAqBlL,GAAtB,OAC3BkL,EACGvJ,QAAO,SAACjC,GAAD,OACNA,EAAc5B,cAAcyJ,SAASsD,MAEtClK,SAAQ,SAACjB,GACRuL,EAA+BvL,EAAc9B,OAAOuN,KAAK,CACvDzL,gBACAM,gBAeR8K,GAHAA,GAHAA,GAHAA,EAA6BA,EAA2BM,OACtDH,EAA+B5M,KAEuB+M,OACtDH,EAA+B5M,KAEuB+M,OACtDH,EAA+B5M,KAEuB+M,OACtDH,EAA+B5M,KAM7B2M,GAA+C,SACnDK,EACAP,GAEA,KACEA,EAA2B3M,OAAS,GACpCkN,EAASvK,YAAcC,GAAW0C,cAClC,CACA,IAAM6H,EAAOR,EAA2BS,MACxCF,EAAW7L,GACT,CACEW,eACAH,MAAOsL,EAAKtL,MACZ0B,qBAAsB2J,EAAS3J,qBAC/B3B,YAAasL,EAAStL,YACtBG,wBACAY,UAAWC,GAAW0C,aACtB0G,wBAAyBW,GAE3BQ,EAAK5L,eAQT,OAAO2L,GAGHjG,GAAU,WACd,IAAIoG,EACFrL,EAAe,IAAMJ,EAAY5B,OAAS,EAAIgC,EAAe,EAC3DkF,IACFmG,EAAkBrL,GAEpB0I,GACE,CACEjF,UAAW,EACXzD,aAAcqL,EACdnG,eAAe,EACf0E,oCAAoC,EACpCjJ,UAAWC,GAAW2D,UAExBqE,KA2FE0C,GAA6B,SACjCC,EACAC,EACAC,EACAnF,GAEAiF,EAAwBjF,GAAa0E,KAAKS,GAE1C,IAAMC,EAA0BH,EAC9BjF,GACAqF,WACA,SAACpM,GAAD,OAAmBA,EAAckC,OAAS+J,EAAmB/J,QAK/D,OAFA8J,EAAwBjF,GAAasF,OAAOF,EAAyB,GAE9DH,GAGT,OACE,6BACE,8CAAoBxJ,GAAyBmH,IAC7C,oCACA,uCAAaoB,IACb,kBAAC,GAAD,CACE3H,gBAAiBA,GACjBC,sBAAuBhD,EAAYI,GACnCuB,qBAAsBA,EACtBZ,UAAWA,EACXkC,iBAAkB,SAACtD,IApHA,SAACA,GACxBgC,EAAqBvB,GAArB,sBACKuB,EAAqBvB,IAD1B,CAEET,IAEFK,EAAYI,IAAiBT,EAAc3B,KAG3C8K,GACE,CACEnH,qBAAsBA,EACtB3B,YAAaA,GAEfgJ,IAwGIiD,CAAiBtM,GACjB0F,QAGJ,kBAAC,GAAD,CACEtC,gBAAiBA,GACjBmC,eAAgBlF,EAChBmF,wBAAyBxD,EACzBvB,aAAcA,EACdgF,iBAAkBrE,EAClBsE,QAASA,GACTC,cAAeA,EACfC,eAvPiB,WAIrBuD,GACE,CACE/H,UAAWC,GAAW2D,SACtBW,eAAe,EACf0E,oCAAoC,GAEtChB,KA8OExD,gBA1OkB,WACtBqF,GAAqB5G,EAAgBC,IA0OjCuB,gBA7FkB,SAACyG,GACvB,IAAMzB,EAAepK,GACnB,CACEF,wBACAwB,uBACA3B,cACAC,MAAOG,EACPW,UAAWC,GAAW0C,cAExBpD,GAAerB,UACfiN,GAEFjB,GACER,EACAL,KAgFE1E,8BA5EsB,SAC1ByG,EACAC,EACAC,GAEA,IAAM5B,EAAe,CACnBtK,wBACAH,cACAC,MAAOG,EACPW,UAAWC,GAAW0C,cAGxB+G,EAAa9I,qBAAuB+J,GAClC/J,EACAwK,EACAC,EACAhM,GAEFqK,EAAa9I,qBAAuB+J,GAClCjB,EAAa9I,qBACbyK,EACAD,EACAE,GAGFpB,GACER,EACAL,OAmDA,kBAAC,GAAD,CACErH,gBAAiBA,GACjBc,UAAWA,EACXC,aAAcA,EACdG,cAAeA,EACfC,eAAgBA,EAChBH,WA3Sa,SAACE,EAAeC,GACjC,IAGIoI,GAAmB,EAMvB,GAT+BjF,EAAmBjH,GAAcoH,SAC9DE,GAAUG,gBAIkB5D,IAAkBC,IAE9CoI,GAAmB,GAEjB1B,IAAmCZ,EAErClB,GACE,CACE/H,UAAWC,GAAWiF,eACtBX,cAAegH,EACfrI,cAAeA,EACfC,eAAgBA,GAElB8E,QATJ,CAgBA,IAAMsC,EAAWT,GAAqB5G,EAAgBC,GACtD4E,GACE,CACE/H,UAAWuK,EAASvK,UACpBuE,cAAegH,EACfrI,cAAeA,EACfC,eAAgBA,EAChBvC,qBAAsB2J,EAAS3J,qBAC/ByI,wBAAyBkB,EAASlB,wBAClCpK,YAAasL,EAAStL,aAExBgJ,MAuQEhF,sBAAuBqD,EAAmBjH,GAAcoH,SACtDE,GAAUC,cAEZxD,aAAcpD,IAEhB,yBAAK5C,UAAU,OACZ6B,EAAYqD,KAAI,SAAC8D,EAAO/E,GAAR,OACf,yBAAKgB,IAAKhB,EAAOjE,UAAU,gBACzB,kBAAC,GAAD,CACE4E,gBAAiBA,GACjB2D,YAAatE,EACbhC,aAAcA,EACd+G,MAAOA,EACPjC,eAAgBlF,EAChBM,eAAgBqB,EAAqBS,GACrCiF,mBAAoBA,EACpBlD,aAAcpD,EACdkC,iBAAkB,SAACqE,IA7IX,SAACA,GACnBD,EAAmBjH,GAAnB,sBACKiH,EAAmBjH,IADxB,CAEEkH,IAEED,EAAmBjH,GAAchC,QAAU,EAC7CoL,EAAQpJ,IAGVJ,EAAYI,IAAiBkH,EAAStJ,KAGtC8K,GACE,CACEzB,mBAAoBA,EACpBrH,YAAaA,GAEfgJ,KA6HUuD,CAAYjF,GACZjC,MAEF2E,mCACEA,W,gBChZHwC,GAAW,WAAO,IACrBC,EAAWC,eAAXD,OADoB,EAEA9G,oBAAU,GAFV,mBAErBgH,EAFqB,KAEbC,EAFa,OAGkBjH,mBAAS,GAH3B,mBAGrB2D,EAHqB,KAGJuD,EAHI,OAIYlH,oBAAS,GAJrB,mBAIrBmH,EAJqB,KAIPC,EAJO,OAKgBpH,oBAAS,GALzB,mBAKrBqH,EALqB,KAKLC,EALK,OAMgBtH,oBAAS,GANzB,mBAMrBuH,EANqB,KAMLC,EANK,OAOwBxH,mBAAS,GAPjC,mBAOrByH,EAPqB,KAODC,EAPC,KAS5B/C,qBAAU,WFiB2B,IAACC,EEapC,OFboCA,EEhBL,SAAChB,EAAayD,GAC3CG,GAAkB,GAClBE,EAAsB9D,GACtB0D,EAAkBD,GAClB5E,QAAQC,IAAI,2CAA4CkB,IFa5DhB,GAAOiC,GAAG,0BAA0B,SAACjB,EAAayD,GAAd,OAClCzC,EAAShB,EAAayD,MAIY,SAACzC,GACrChC,GAAOiC,GAAG,wBAAyBD,GEhBjC+C,EAA8B,WAC5BP,GAAgB,GAChB3E,QAAQC,IAAI,4BFRyB,SAACkC,GAC1ChC,GAAOiC,GAAG,+BAA+B,SAACjB,GAAD,OACvCgB,EAAShB,MESTgE,EAAmC,SAAChE,GAClC8D,EAAsB9D,GACtBnB,QAAQC,IACN,qDACAkB,MFTuB,SAACgB,GAC9BhC,GAAOiC,GAAG,gBAAgB,SAACgD,GACzB,IAAM9G,EAAc8G,EAAczB,WAChC,SAAC0B,GAAD,OAAcA,IAAalF,GAAOhE,MAEpCgG,EAAS7D,MEQTgH,EAAuB,SAAChH,GACtBuG,GAAkB,GAClBJ,EAAmBnG,MAGhBwG,IACH9E,QAAQC,IAAI,qBFzCO,SAACoE,GACxBlE,GAAOG,KAAK,iBAAkB+D,GEyC1BkB,CAAiBlB,IAEZ,WFMTlE,GAAOK,IAAI,0BAIXL,GAAOK,IAAI,yBAIXL,GAAOK,IAAI,+BAIXL,GAAOK,IAAI,oBEVX,IAcMgF,EAAiBjB,GAAU,EAEjC,OAAOG,EACL,kBAAC,KAAD,CAAUe,GAAG,eACXb,EACF,kBAAC,GAAD,CACE1D,gBAAiBA,EACjBC,YAAa6D,EACb5D,QAbY,SAACpJ,GACf6M,GAAkB,GAClBL,EAAUxM,MAcV,oCACE,4BACGwN,EAAc,iBACDzL,GAAyBwK,GADxB,SAEX,8BAEN,0EAAgDF,GAChD,8CAAoBW,GACnBA,EAAqB,EACpB,2DAEA,6BACE,8CAEGA,EAAqB,EAClB,oDACA,IAEN,4BAAQzJ,QA3CS,WACvByE,QAAQC,IAAI,uBAAwB+E,GF7DlB,SAACX,GACrBlE,GAAOG,KAAK,aAAc+D,GE6DxBqB,CAAcrB,KAyCR,eAGJ,kBAAC,KAAD,CAAMoB,GAAG,SACP,4BAAQ1P,UAAU,aAAawF,QA1Cf,WFpDtB4E,GAAOG,KAAK,qBE8FN,iBCxGKqF,GAAO,WAAO,IAAD,EACIpI,mBAAS,IADb,mBACjB8G,EADiB,KACTuB,EADS,KAGxB1D,qBAAU,WHcsB,IAACC,EGT/B,OHS+BA,EGbL,SAACkC,GACzBwB,EAAexB,IHanBlE,GAAOiC,GAAG,sBAAsB,SAACiC,GAAD,OAAYlC,EAASkC,MGV5C9D,MAGT,IAAIuF,EAAUC,eAMRF,EAAiB,SAACxB,GACtBrE,QAAQC,IAAI,yBACZD,QAAQC,IAAR,uBAA4BoE,IAC5ByB,EAAQ9C,KAAR,gBAAsBqB,KAQxB,OACE,oCACE,sDACA,yCACA,2BACEjI,KAAK,OACLC,MAAOgI,EACP7H,SAZiB,SAACgC,GACtBwB,QAAQC,IAAI,yBACZ2F,EAAUpH,EAAMC,OAAOpC,QAWnB2J,YAAY,qBAEd,kBAAC,KAAD,CAAMP,GAAE,gBAAWpB,IACjB,2CAEF,+CACA,4BAAQ9I,QA7BoB,WHXhC4E,GAAOG,KAAK,sBGwCR,sBC/CO2F,GAAe,WAC1B,OACE,oCACE,8CACA,oFACA,kBAAC,KAAD,CAAMR,GAAG,KAAT,kBC0BSS,GAvBI,WACjB,OACE,oCACE,kBAAC,KAAD,KACE,6BACE,kBAAC,KAAD,KACE,kBAAC,KAAD,CAAOC,KAAK,cACV,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAOA,KAAK,iBACV,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAOA,KAAK,SACV,kBAAC,GAAD,OAEF,kBAAC,KAAD,CAAUV,GAAG,eCdLW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAAS9M,OACP,kBAAC,IAAM+M,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpH,QAAQoH,MAAMA,EAAMhJ,c","file":"static/js/main.1c301936.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Establishment = ({\r\n  title,\r\n  color,\r\n  industry,\r\n  activationNum,\r\n  cost,\r\n  description,\r\n}) => {\r\n  const cssClassName = `establishment${color}`;\r\n  return (\r\n    <div className={cssClassName}>\r\n      <div>\r\n        <b>{title}</b>\r\n      </div>\r\n      <div>Industry: {industry}</div>\r\n      <div>\r\n        {activationNum.length > 1\r\n          ? 'Activation numbers: ' + activationNum[0] + '-' + activationNum[1]\r\n          : 'Activation number: ' + activationNum[0]}\r\n      </div>\r\n      <div>Cost: {cost}</div>\r\n      <div>{description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Establishment;\r\n","import React from 'react';\r\nimport Establishment from './components/Establishment';\r\nimport { turnPhases } from './components/Game';\r\n\r\nconst industries = {\r\n  nil: '!!!NULL!!!',\r\n  wheat: 'Wheat',\r\n  cow: 'Cow',\r\n  bread: 'Bread',\r\n  cup: 'Cup',\r\n  gear: 'Gear',\r\n  tower: 'Tower',\r\n  factory: 'Factory',\r\n  fruit: 'Fruit',\r\n};\r\n\r\nconst establishmentColors = {\r\n  red: 'Red',\r\n  blue: 'Blue',\r\n  green: 'Green',\r\n  purple: 'Purple',\r\n};\r\n\r\nconst establishmentNames = {\r\n  wheatField: 'Wheat Field',\r\n  ranch: 'Ranch',\r\n  bakery: 'Bakery',\r\n  cafe: 'Cafe',\r\n  convenienceStore: 'Convenience Store',\r\n  forest: 'Forest',\r\n  stadium: 'Stadium',\r\n  tvStation: 'TV Station',\r\n  businessCenter: 'Business Center',\r\n  cheeseFactory: 'Cheese Factory',\r\n  furnitureFactory: 'Furniture Factory',\r\n  mine: 'Mine',\r\n  familyRestaurant: 'Family Restaurant',\r\n  appleOrchard: 'Apple Orchard',\r\n  farmersMarket: 'Farmers Market',\r\n};\r\n\r\nconst establishmentCosts = {\r\n  wheatField: 1,\r\n  ranch: 1,\r\n  bakery: 1,\r\n  cafe: 2,\r\n  convenienceStore: 2,\r\n  forest: 3,\r\n  stadium: 6,\r\n  tvStation: 7,\r\n  businessCenter: 8,\r\n  cheeseFactory: 5,\r\n  furnitureFactory: 3,\r\n  mine: 6,\r\n  familyRestaurant: 3,\r\n  appleOrchard: 3,\r\n  farmersMarket: 2,\r\n};\r\n\r\nconst establishmentActivationNums = {\r\n  wheatField: [1],\r\n  ranch: [2],\r\n  bakery: [2, 3],\r\n  cafe: [3],\r\n  convenienceStore: [4],\r\n  forest: [5],\r\n  stadium: [6],\r\n  tvStation: [6],\r\n  businessCenter: [6],\r\n  cheeseFactory: [7],\r\n  furnitureFactory: [8],\r\n  mine: [9],\r\n  familyRestaurant: [9, 10],\r\n  appleOrchard: [10],\r\n  farmersMarket: [11, 12],\r\n};\r\n\r\nconst makeEstablishmentTransaction = (gameState, establishment) => {\r\n  switch (establishment.color) {\r\n    case establishmentColors.blue:\r\n      return onBlueEstablishmentActivated(gameState, establishment);\r\n    case establishmentColors.green:\r\n      return onGreenEstablishmentActivated(gameState, establishment);\r\n    case establishmentColors.red:\r\n      return onRedEstablishmentActivated(gameState, establishment);\r\n    case establishmentColors.purple:\r\n      return onPurpleEstablishmentActivated(gameState, establishment);\r\n    default:\r\n      return gameState;\r\n  }\r\n};\r\n\r\nconst onBlueEstablishmentActivated = (gameState, establishment) => {\r\n  gameState.playerCoins[gameState.owner] += getRevenue(\r\n    establishment,\r\n    gameState.shoppingMallComplete\r\n  );\r\n  return gameState;\r\n};\r\n\r\nconst onGreenEstablishmentActivated = (gameState, establishment) => {\r\n  if (gameState.activePlayer === gameState.owner) {\r\n    gameState.playerCoins[gameState.owner] += getRevenue(\r\n      establishment,\r\n      gameState.shoppingMallComplete,\r\n      gameState\r\n    );\r\n  }\r\n  return gameState;\r\n};\r\n\r\nconst onRedEstablishmentActivated = (gameState, establishment) => {\r\n  if (gameState.activePlayer !== gameState.owner) {\r\n    exchangeCoinsBetweenPlayers(\r\n      gameState,\r\n      establishment,\r\n      gameState.activePlayer\r\n    );\r\n  }\r\n  return gameState;\r\n};\r\n\r\nconst onPurpleEstablishmentActivated = (gameState, establishment) => {\r\n  if (gameState.activePlayer === gameState.owner) {\r\n    switch (establishment) {\r\n      case establishments.stadium:\r\n        return onStadiumActivated(gameState, establishment);\r\n      case establishments.tvStation:\r\n        return onTvStationActivated(gameState);\r\n      case establishments.businessCenter:\r\n        return onBusinessCenterActivated(gameState);\r\n      default:\r\n        return null;\r\n    }\r\n  }\r\n  return gameState;\r\n};\r\n\r\nconst onStadiumActivated = (gameState, establishment) => {\r\n  Object.entries(gameState.playerCoins).forEach((pair) => {\r\n    const player = pair[0];\r\n    if (player !== gameState.owner) {\r\n      gameState = exchangeCoinsBetweenPlayers(gameState, establishment, player);\r\n    }\r\n  });\r\n  return gameState;\r\n};\r\n\r\nconst onTvStationActivated = (gameState) => {\r\n  gameState.turnPhase = turnPhases.choosePlayerToStealCoinsFrom;\r\n  return gameState;\r\n};\r\n\r\nconst onBusinessCenterActivated = (gameState) => {\r\n  gameState.turnPhase = turnPhases.chooseEstablishmentToSteal;\r\n  return gameState;\r\n};\r\n\r\nconst exchangeCoinsBetweenPlayers = (\r\n  gameState,\r\n  establishment,\r\n  payingPlayer\r\n) => {\r\n  const actualExchangeAmount = Math.min(\r\n    getRevenue(establishment, gameState.shoppingMallComplete),\r\n    gameState.playerCoins[payingPlayer]\r\n  );\r\n  gameState.playerCoins[payingPlayer] -= actualExchangeAmount;\r\n  gameState.playerCoins[gameState.owner] += actualExchangeAmount;\r\n  return gameState;\r\n};\r\n\r\nconst getRevenue = (establishment, shoppingMallComplete, gameState = {}) => {\r\n  return (\r\n    establishment.revenue * getRevenueMultiplier(establishment, gameState) +\r\n    ((establishment.industry === industries.bread ||\r\n      establishment.industry === industries.cup) &&\r\n    shoppingMallComplete\r\n      ? 1\r\n      : 0)\r\n  );\r\n};\r\n\r\nconst getRevenueMultiplier = (activatedEstablishment, gameState) => {\r\n  if (\r\n    gameState !== {} &&\r\n    activatedEstablishment.dependingIndustry !== industries.nil\r\n  ) {\r\n    const establishmentIndustryCount = gameState.playerEstablishments[\r\n      gameState.owner\r\n    ].filter(\r\n      (establishment) =>\r\n        establishment.industry === activatedEstablishment.dependingIndustry\r\n    ).length;\r\n    return establishmentIndustryCount;\r\n  }\r\n  return 1;\r\n};\r\n\r\nconst establishments = {\r\n  wheatField: {\r\n    name: establishmentNames.wheatField,\r\n    activationNum: establishmentActivationNums.wheatField,\r\n    cost: establishmentCosts.wheatField,\r\n    industry: industries.wheat,\r\n    color: establishmentColors.blue,\r\n    revenue: 1,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 0,\r\n    render: (\r\n      <Establishment\r\n        title={establishmentNames.wheatField}\r\n        activationNum={establishmentActivationNums.wheatField}\r\n        color={establishmentColors.blue}\r\n        industry={industries.wheat}\r\n        cost={establishmentCosts.wheatField}\r\n        description=\"Get 1 coin from the bank. (anyone's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  ranch: {\r\n    name: establishmentNames.ranch,\r\n    activationNum: establishmentActivationNums.ranch,\r\n    cost: establishmentCosts.ranch,\r\n    industry: industries.cow,\r\n    color: establishmentColors.blue,\r\n    revenue: 1,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 1,\r\n    render: (\r\n      <Establishment\r\n        title={establishmentNames.ranch}\r\n        activationNum={establishmentActivationNums.ranch}\r\n        color={establishmentColors.blue}\r\n        industry={industries.cow}\r\n        cost={establishmentCosts.ranch}\r\n        description=\"Get 1 coin from the bank. (anyone's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  bakery: {\r\n    name: establishmentNames.bakery,\r\n    activationNum: establishmentActivationNums.bakery,\r\n    cost: establishmentCosts.bakery,\r\n    industry: industries.bread,\r\n    color: establishmentColors.green,\r\n    revenue: 1,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 2,\r\n    render: (\r\n      <Establishment\r\n        title={establishmentNames.bakery}\r\n        activationNum={establishmentActivationNums.bakery}\r\n        color={establishmentColors.green}\r\n        industry={industries.bread}\r\n        cost={establishmentCosts.bakery}\r\n        description='Get 1 coin from the bank. (your turn only)'\r\n      />\r\n    ),\r\n  },\r\n\r\n  cafe: {\r\n    name: establishmentNames.cafe,\r\n    activationNum: establishmentActivationNums.cafe,\r\n    cost: establishmentCosts.cafe,\r\n    industry: industries.cup,\r\n    color: establishmentColors.red,\r\n    revenue: 1,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 3,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.cafe}\r\n        title={establishmentNames.cafe}\r\n        color={establishmentColors.red}\r\n        industry={industries.cup}\r\n        cost={establishmentCosts.cafe}\r\n        description=\"Take 1 coin from the active player. (opponent's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  convenienceStore: {\r\n    name: establishmentNames.convenienceStore,\r\n    activationNum: establishmentActivationNums.convenienceStore,\r\n    cost: establishmentCosts.convenienceStore,\r\n    industry: industries.bread,\r\n    color: establishmentColors.green,\r\n    revenue: 3,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 4,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.convenienceStore}\r\n        title={establishmentNames.convenienceStore}\r\n        color={establishmentColors.green}\r\n        industry={industries.bread}\r\n        cost={establishmentCosts.convenienceStore}\r\n        description='Get 3 coins from the bank. (your turn only)'\r\n      />\r\n    ),\r\n  },\r\n\r\n  forest: {\r\n    name: establishmentNames.forest,\r\n    activationNum: establishmentActivationNums.forest,\r\n    cost: establishmentCosts.forest,\r\n    industry: industries.gear,\r\n    color: establishmentColors.blue,\r\n    revenue: 3,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 5,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.forest}\r\n        title={establishmentNames.forest}\r\n        color={establishmentColors.blue}\r\n        industry={industries.gear}\r\n        cost={establishmentCosts.forest}\r\n        description=\"Get 1 coin from the bank. (anyone's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  stadium: {\r\n    name: establishmentNames.stadium,\r\n    activationNum: establishmentActivationNums.stadium,\r\n    cost: establishmentCosts.stadium,\r\n    industry: industries.tower,\r\n    color: establishmentColors.purple,\r\n    revenue: 2,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 6,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.stadium}\r\n        title={establishmentNames.stadium}\r\n        color={establishmentColors.purple}\r\n        industry={industries.tower}\r\n        cost={establishmentCosts.stadium}\r\n        description='Get 2 coins from all players. (your turn only)'\r\n      />\r\n    ),\r\n  },\r\n\r\n  tvStation: {\r\n    name: establishmentNames.tvStation,\r\n    activationNum: establishmentActivationNums.tvStation,\r\n    cost: establishmentCosts.tvStation,\r\n    industry: industries.tower,\r\n    color: establishmentColors.purple,\r\n    revenue: 5,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 7,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.tvStation}\r\n        title={establishmentNames.tvStation}\r\n        color={establishmentColors.purple}\r\n        industry={industries.tower}\r\n        cost={establishmentCosts.tvStation}\r\n        description='Take 5 coins from any one player. (your turn only)'\r\n      />\r\n    ),\r\n  },\r\n\r\n  businessCenter: {\r\n    name: establishmentNames.businessCenter,\r\n    activationNum: establishmentActivationNums.businessCenter,\r\n    cost: establishmentCosts.businessCenter,\r\n    industry: industries.tower,\r\n    color: establishmentColors.purple,\r\n    revenue: 0,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 8,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.businessCenter}\r\n        title={establishmentNames.businessCenter}\r\n        color={establishmentColors.purple}\r\n        industry={industries.tower}\r\n        cost={establishmentCosts.businessCenter}\r\n        description={`Trade one non-${industries.tower} establishment with another player. (your turn only)`}\r\n      />\r\n    ),\r\n  },\r\n\r\n  cheeseFactory: {\r\n    name: establishmentNames.cheeseFactory,\r\n    activationNum: establishmentActivationNums.cheeseFactory,\r\n    cost: establishmentCosts.cheeseFactory,\r\n    industry: industries.factory,\r\n    color: establishmentColors.green,\r\n    revenue: 3,\r\n    dependingIndustry: industries.cow,\r\n    sortOrder: 9,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.cheeseFactory}\r\n        title={establishmentNames.cheeseFactory}\r\n        color={establishmentColors.green}\r\n        industry={industries.factory}\r\n        cost={establishmentCosts.cheeseFactory}\r\n        description={`Get 3 coins from the bank for each ${industries.cow} establishment that you own. (your turn only)`}\r\n      />\r\n    ),\r\n  },\r\n\r\n  furnitureFactory: {\r\n    name: establishmentNames.furnitureFactory,\r\n    activationNum: establishmentActivationNums.furnitureFactory,\r\n    cost: establishmentCosts.furnitureFactory,\r\n    industry: industries.factory,\r\n    color: establishmentColors.green,\r\n    revenue: 3,\r\n    dependingIndustry: industries.gear,\r\n    sortOrder: 10,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.furnitureFactory}\r\n        title={establishmentNames.furnitureFactory}\r\n        color={establishmentColors.green}\r\n        industry={industries.factory}\r\n        cost={establishmentCosts.furnitureFactory}\r\n        description={`Get 3 coins from the bank for each ${industries.gear} establishment that you own. (your turn only)`}\r\n      />\r\n    ),\r\n  },\r\n\r\n  mine: {\r\n    name: establishmentNames.mine,\r\n    activationNum: establishmentActivationNums.mine,\r\n    cost: establishmentCosts.mine,\r\n    industry: industries.gear,\r\n    color: establishmentColors.blue,\r\n    revenue: 5,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 11,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.mine}\r\n        title={establishmentNames.mine}\r\n        color={establishmentColors.blue}\r\n        industry={industries.gear}\r\n        cost={establishmentCosts.mine}\r\n        description=\"Get 5 coins from the bank. (anyone's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  familyRestaurant: {\r\n    name: establishmentNames.familyRestaurant,\r\n    activationNum: establishmentActivationNums.familyRestaurant,\r\n    cost: establishmentCosts.familyRestaurant,\r\n    industry: industries.cup,\r\n    color: establishmentColors.red,\r\n    revenue: 2,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 12,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.familyRestaurant}\r\n        title={establishmentNames.familyRestaurant}\r\n        color={establishmentColors.red}\r\n        industry={industries.cup}\r\n        cost={establishmentCosts.familyRestaurant}\r\n        description=\"Take 2 coins from the active player. (opponent's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  appleOrchard: {\r\n    name: establishmentNames.appleOrchard,\r\n    activationNum: establishmentActivationNums.appleOrchard,\r\n    cost: establishmentCosts.appleOrchard,\r\n    industry: industries.wheat,\r\n    color: establishmentColors.blue,\r\n    revenue: 3,\r\n    dependingIndustry: industries.nil,\r\n    sortOrder: 13,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.appleOrchard}\r\n        title={establishmentNames.appleOrchard}\r\n        color={establishmentColors.blue}\r\n        industry={industries.wheat}\r\n        cost={establishmentCosts.appleOrchard}\r\n        description=\"Get 3 coins from the bank. (anyone's turn)\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  farmersMarket: {\r\n    name: establishmentNames.farmersMarket,\r\n    activationNum: establishmentActivationNums.farmersMarket,\r\n    cost: establishmentCosts.farmersMarket,\r\n    industry: industries.fruit,\r\n    color: establishmentColors.green,\r\n    revenue: 2,\r\n    dependingIndustry: industries.wheat,\r\n    sortOrder: 14,\r\n    render: (\r\n      <Establishment\r\n        activationNum={establishmentActivationNums.farmersMarket}\r\n        title={establishmentNames.farmersMarket}\r\n        color={establishmentColors.green}\r\n        industry={industries.fruit}\r\n        cost={establishmentCosts.farmersMarket}\r\n        description={`Get 2 coins from the bank for each ${industries.wheat} establishment that you own. (your turn only)`}\r\n      />\r\n    ),\r\n  },\r\n};\r\n\r\nconst establishmentLookupTable = {\r\n  [establishments.wheatField.name]: establishments.wheatField,\r\n  [establishments.ranch.name]: establishments.ranch,\r\n  [establishments.bakery.name]: establishments.bakery,\r\n  [establishments.cafe.name]: establishments.cafe,\r\n  [establishments.convenienceStore.name]: establishments.convenienceStore,\r\n  [establishments.forest.name]: establishments.forest,\r\n  [establishments.stadium.name]: establishments.stadium,\r\n  [establishments.tvStation.name]: establishments.tvStation,\r\n  [establishments.businessCenter.name]: establishments.businessCenter,\r\n  [establishments.cheeseFactory.name]: establishments.cheeseFactory,\r\n  [establishments.furnitureFactory.name]: establishments.furnitureFactory,\r\n  [establishments.mine.name]: establishments.mine,\r\n  [establishments.familyRestaurant.name]: establishments.familyRestaurant,\r\n  [establishments.appleOrchard.name]: establishments.appleOrchard,\r\n  [establishments.farmersMarket.name]: establishments.farmersMarket,\r\n};\r\n\r\nconst establishmentList = [\r\n  establishments.wheatField,\r\n  establishments.ranch,\r\n  establishments.bakery,\r\n  establishments.cafe,\r\n  establishments.convenienceStore,\r\n  establishments.forest,\r\n  establishments.stadium,\r\n  establishments.tvStation,\r\n  establishments.businessCenter,\r\n  establishments.cheeseFactory,\r\n  establishments.furnitureFactory,\r\n  establishments.mine,\r\n  establishments.familyRestaurant,\r\n  establishments.appleOrchard,\r\n  establishments.farmersMarket,\r\n];\r\n\r\nconst establishmentTotals = {\r\n  [establishments.wheatField.name]: 10,\r\n  [establishments.ranch.name]: 6,\r\n  [establishments.bakery.name]: 9,\r\n  [establishments.cafe.name]: 5,\r\n  [establishments.convenienceStore.name]: 6,\r\n  [establishments.forest.name]: 6,\r\n  [establishments.stadium.name]: 4,\r\n  [establishments.tvStation.name]: 4,\r\n  [establishments.businessCenter.name]: 4,\r\n  [establishments.cheeseFactory.name]: 6,\r\n  [establishments.furnitureFactory.name]: 6,\r\n  [establishments.mine.name]: 6,\r\n  [establishments.familyRestaurant.name]: 6,\r\n  [establishments.appleOrchard.name]: 6,\r\n  [establishments.farmersMarket.name]: 6,\r\n};\r\n\r\nexport {\r\n  establishments,\r\n  establishmentList,\r\n  establishmentLookupTable,\r\n  establishmentColors,\r\n  establishmentTotals,\r\n  industries,\r\n  exchangeCoinsBetweenPlayers,\r\n  makeEstablishmentTransaction,\r\n};\r\n","const getPlayerNumberFromIndex = (index) => parseInt(index) + 1;\r\n\r\nconst splitListIntoSublistsWithMaxLength = (establishmentList, rowLength) =>\r\n  Array.from(Array(Math.ceil(establishmentList.length / rowLength)), (_, i) =>\r\n    establishmentList.slice(i * rowLength, i * rowLength + rowLength)\r\n  );\r\n\r\nexport { getPlayerNumberFromIndex, splitListIntoSublistsWithMaxLength };\r\n","import React from 'react';\r\nimport { turnPhases } from './Game';\r\nimport { establishmentList, establishmentTotals } from '../establishments';\r\nimport { splitListIntoSublistsWithMaxLength } from '../utils';\r\n\r\nconst BankEstablishmentPiles = ({\r\n  thisPlayersTurn,\r\n  activePlayerCoinCount,\r\n  playerEstablishments,\r\n  turnPhase,\r\n  onBuyButtonClick,\r\n}) => {\r\n  const establishmentCounts = {};\r\n  Object.keys(establishmentTotals).forEach(\r\n    (key) => (establishmentCounts[key] = establishmentTotals[key])\r\n  );\r\n  playerEstablishments.forEach((establishments) => {\r\n    establishments.forEach((establishment) => {\r\n      establishmentCounts[establishment.name]--;\r\n    });\r\n  });\r\n\r\n  return (\r\n    <>\r\n      {splitListIntoSublistsWithMaxLength(establishmentList, 5).map(\r\n        (row, rowIndex) => (\r\n          <div key={rowIndex} className='row'>\r\n            {row.map((establishment, colIndex) => (\r\n              <div key={colIndex} className='column'>\r\n                {establishment.render}\r\n                <div>Count: {establishmentCounts[establishment.name]}</div>\r\n                <button\r\n                  disabled={\r\n                    turnPhase !== turnPhases.construction ||\r\n                    activePlayerCoinCount < establishment.cost ||\r\n                    establishmentCounts[establishment.name] <= 0 ||\r\n                    !thisPlayersTurn\r\n                  }\r\n                  onClick={() => onBuyButtonClick(establishment)}\r\n                >\r\n                  Buy {establishment.name}\r\n                </button>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        )\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default BankEstablishmentPiles;\r\n","import React from 'react';\r\nimport { turnPhases } from './Game';\r\n\r\nconst Dice = ({\r\n  thisPlayersTurn,\r\n  diceCount,\r\n  setDiceCount,\r\n  onDiceRoll,\r\n  trainStationActivated,\r\n  firstDieValue,\r\n  secondDieValue,\r\n  currentPhase,\r\n}) => {\r\n  const rollDie = () => 1 + Math.floor(Math.random() * 6);\r\n\r\n  const makeRoll = (rollTwoDice) => {\r\n    const firstDieResult = rollDie();\r\n    if (!rollTwoDice) {\r\n      return [firstDieResult, 0];\r\n    }\r\n    const secondDieResult = rollDie();\r\n    return [firstDieResult, secondDieResult];\r\n  };\r\n\r\n  const onRollButtonClicked = () => {\r\n    const [firstDieResult, secondDieResult] = makeRoll(diceCount === 2);\r\n    onDiceRoll(firstDieResult, secondDieResult);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Dice</h3>\r\n      <input\r\n        id='dice1'\r\n        type='radio'\r\n        value={1}\r\n        checked={diceCount === 1}\r\n        disabled={currentPhase !== turnPhases.rollDice || !thisPlayersTurn}\r\n        onChange={() => setDiceCount(1)}\r\n      />\r\n      1\r\n      <input\r\n        id='dice2'\r\n        type='radio'\r\n        value={2}\r\n        checked={diceCount !== 1}\r\n        disabled={\r\n          currentPhase !== turnPhases.rollDice ||\r\n          !trainStationActivated ||\r\n          !thisPlayersTurn\r\n        }\r\n        onChange={() => setDiceCount(2)}\r\n      />\r\n      2\r\n      <div>\r\n        You rolled:{' '}\r\n        {secondDieValue === 0\r\n          ? firstDieValue\r\n          : `${firstDieValue} + ${secondDieValue} = ${\r\n              firstDieValue + secondDieValue\r\n            }`}\r\n      </div>\r\n      <button\r\n        disabled={currentPhase !== turnPhases.rollDice || !thisPlayersTurn}\r\n        onClick={onRollButtonClicked}\r\n      >\r\n        Roll\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Dice;\r\n","import React, { useState } from 'react';\r\nimport { turnPhases } from './Game';\r\nimport {\r\n  establishments,\r\n  establishmentLookupTable,\r\n  industries,\r\n} from '../establishments';\r\nimport {\r\n  getPlayerNumberFromIndex,\r\n  splitListIntoSublistsWithMaxLength,\r\n} from '../utils';\r\n\r\nconst PhaseIndicator = ({\r\n  thisPlayersTurn,\r\n  allPlayerCoins,\r\n  allPlayerEstablishments,\r\n  activePlayer,\r\n  currentTurnPhase,\r\n  endTurn,\r\n  repeatingTurn,\r\n  onAcceptReroll,\r\n  onDeclineReroll,\r\n  onStealeeChosen,\r\n  onEstablishmentsToTradeChosen,\r\n}) => {\r\n  const [playerEstablishmentToTrade, setPlayerEstablishmentToTrade] = useState([\r\n    -1,\r\n    establishments.wheatField,\r\n  ]);\r\n  const [\r\n    opponentEstablishmentToTrade,\r\n    setOpponentEstablishmentToTrade,\r\n  ] = useState([-1, establishments.wheatField]);\r\n\r\n  const messages = {};\r\n  messages[turnPhases.rollDice] = 'Roll, ya slowpoke!';\r\n  messages[turnPhases.decideToReroll] =\r\n    \"Since you've completed the radio tower, you may re-roll the dice once this turn.\";\r\n  messages[turnPhases.earnIncome] = 'Dispersing income...';\r\n  messages[\r\n    turnPhases.choosePlayerToStealCoinsFrom\r\n  ] = `TV Station activated! Choose a poor soul to steal ${establishments.tvStation.revenue} coins from:`;\r\n  messages[turnPhases.chooseEstablishmentToSteal] =\r\n    'Business Center activated! Choose an establishment you own to swap with another player:';\r\n  messages[turnPhases.construction] =\r\n    'Purchase an establishment or landmark (if you want).';\r\n\r\n  const mayRerollDice = currentTurnPhase === turnPhases.decideToReroll;\r\n  const shouldDisplaySkipButton =\r\n    currentTurnPhase === turnPhases.construction && thisPlayersTurn;\r\n  const shouldDisplayRolledDoublesMessage =\r\n    currentTurnPhase === turnPhases.construction && repeatingTurn;\r\n  const shouldDisplayPlayersToStealFrom =\r\n    currentTurnPhase === turnPhases.choosePlayerToStealCoinsFrom &&\r\n    thisPlayersTurn;\r\n  const shouldDisplayEstablishmentsToSteal =\r\n    currentTurnPhase === turnPhases.chooseEstablishmentToSteal &&\r\n    thisPlayersTurn;\r\n  const message = messages[currentTurnPhase];\r\n  const establishmentMap = {};\r\n\r\n  allPlayerEstablishments.forEach((establishments, playerIndex) => {\r\n    establishmentMap[playerIndex] = {};\r\n    establishments.forEach(\r\n      (establishment) => (establishmentMap[playerIndex][establishment.name] = 0)\r\n    );\r\n    establishments.forEach(\r\n      (establishment) => establishmentMap[playerIndex][establishment.name]++\r\n    );\r\n  });\r\n\r\n  const onOpponentEstablishmentToTradeChanged = (event) => {\r\n    const pair = event.target.value.split(':');\r\n    const playerIndex = parseInt(pair[0]);\r\n    const establishmentName = pair[1];\r\n    setOpponentEstablishmentToTrade([\r\n      playerIndex,\r\n      establishmentLookupTable[establishmentName],\r\n    ]);\r\n  };\r\n\r\n  const onPlayerEstablishmentToTradeChanged = (event) => {\r\n    const establishmentName = event.target.value.split(':')[1];\r\n    setPlayerEstablishmentToTrade([\r\n      activePlayer,\r\n      establishmentLookupTable[establishmentName],\r\n    ]);\r\n  };\r\n\r\n  const getPlayerEstablishmentRendering = (playerIndex) => {\r\n    return splitListIntoSublistsWithMaxLength(\r\n      Object.entries(establishmentMap[playerIndex]),\r\n      4\r\n    ).map((row, rowIndex) => (\r\n      <div key={rowIndex}>\r\n        {row.map((pair) => {\r\n          const establishmentName = pair[0];\r\n          const count = pair[1];\r\n          const establishment = establishmentLookupTable[establishmentName];\r\n          const checked =\r\n            playerIndex === activePlayer\r\n              ? establishment === playerEstablishmentToTrade[1]\r\n              : playerIndex === opponentEstablishmentToTrade[0] &&\r\n                establishment === opponentEstablishmentToTrade[1];\r\n\r\n          if (count > 0 && establishment.industry !== industries.tower) {\r\n            return (\r\n              <div key={establishmentName} className='row'>\r\n                <input\r\n                  id={establishmentName}\r\n                  type='radio'\r\n                  value={playerIndex + ':' + establishmentName}\r\n                  checked={checked}\r\n                  onChange={\r\n                    activePlayer === playerIndex\r\n                      ? onPlayerEstablishmentToTradeChanged\r\n                      : onOpponentEstablishmentToTradeChanged\r\n                  }\r\n                />\r\n                {establishmentName}\r\n                <div className='row'>Count: {count}</div>\r\n              </div>\r\n            );\r\n          }\r\n\r\n          return null;\r\n        })}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h2>Player {getPlayerNumberFromIndex(activePlayer)}'s turn</h2>\r\n      <h3>{message}</h3>\r\n      {shouldDisplayPlayersToStealFrom && (\r\n        <div className='row'>\r\n          {allPlayerCoins.map((playerCoins, playerIndex) => {\r\n            if (playerIndex !== activePlayer) {\r\n              return (\r\n                <div className='column' key={playerIndex}>\r\n                  Player {getPlayerNumberFromIndex(playerIndex)}\r\n                  <button onClick={() => onStealeeChosen(playerIndex)}>\r\n                    Steal\r\n                  </button>\r\n                </div>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      )}\r\n      {shouldDisplayEstablishmentsToSteal && (\r\n        <>\r\n          <h3>Your establishments</h3>\r\n          {getPlayerEstablishmentRendering(activePlayer)}\r\n          {allPlayerCoins.map((coins, playerIndex) => {\r\n            if (playerIndex !== activePlayer) {\r\n              return (\r\n                <div key={playerIndex}>\r\n                  <h3>\r\n                    Player {getPlayerNumberFromIndex(playerIndex)}'s\r\n                    establishments\r\n                  </h3>\r\n                  {getPlayerEstablishmentRendering(playerIndex)}\r\n                </div>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n          <button\r\n            onClick={() =>\r\n              onEstablishmentsToTradeChosen(\r\n                playerEstablishmentToTrade[1],\r\n                opponentEstablishmentToTrade[1],\r\n                opponentEstablishmentToTrade[0]\r\n              )\r\n            }\r\n            disabled={opponentEstablishmentToTrade[0] < 0}\r\n          >\r\n            Trade\r\n          </button>\r\n        </>\r\n      )}\r\n      {mayRerollDice && (\r\n        <>\r\n          <h3>Would you like to re-roll the dice?</h3>\r\n          <button onClick={onAcceptReroll}>Yes</button>\r\n          <button onClick={onDeclineReroll}>No</button>\r\n        </>\r\n      )}\r\n      {shouldDisplayRolledDoublesMessage && (\r\n        <h3>\r\n          Well done! You rolled doubles, so you get to take another turn after\r\n          this one!\r\n        </h3>\r\n      )}\r\n      {shouldDisplaySkipButton && (\r\n        <button onClick={() => endTurn()}>Skip</button>\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PhaseIndicator;\r\n","import React from 'react';\r\nimport { turnPhases } from './Game';\r\n\r\nconst LandmarkPile = ({\r\n  thisPlayersTurn,\r\n  landmarksCompleted,\r\n  playerIndex,\r\n  landmark,\r\n  onBuyButtonClick,\r\n  activePlayer,\r\n  currentPhase,\r\n  coins,\r\n}) => {\r\n  const landmarkIsComplete = landmarksCompleted[playerIndex].includes(landmark);\r\n\r\n  return (\r\n    <>\r\n      {landmark.render}\r\n      <div>Completed: {landmarkIsComplete ? 'yes' : 'no'}</div>\r\n      <button\r\n        onClick={() => onBuyButtonClick(landmark)}\r\n        disabled={\r\n          playerIndex !== activePlayer ||\r\n          landmarkIsComplete ||\r\n          currentPhase !== turnPhases.construction ||\r\n          coins < landmark.cost ||\r\n          !thisPlayersTurn\r\n        }\r\n      >\r\n        Buy {landmark.name}\r\n      </button>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LandmarkPile;\r\n","import React from 'react';\r\n\r\nconst Landmark = ({ title, cost, description }) => {\r\n  return (\r\n    <div className=\"landmark\">\r\n      <div>\r\n        <b>{title}</b>\r\n      </div>\r\n      <div>Cost: {cost}</div>\r\n      <div>{description}</div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Landmark;\r\n","import React from 'react';\r\nimport Landmark from './components/Landmark';\r\n\r\n// Landmark Names\r\nconst trainStationName = 'Train Station';\r\nconst shoppingMallName = 'Shopping Mall';\r\nconst amusementParkName = 'Amusement Park';\r\nconst radioTowerName = 'Radio Tower';\r\n\r\n// Landmark Costs\r\nconst trainStationCost = 4;\r\nconst shoppingMallCost = 10;\r\nconst amusementParkCost = 16;\r\nconst radioTowerCost = 22;\r\n\r\nconst landmarks = {\r\n  trainStation: {\r\n    name: trainStationName,\r\n    cost: trainStationCost,\r\n    render: (\r\n      <Landmark\r\n        title={trainStationName}\r\n        cost={trainStationCost}\r\n        description=\"You may roll 1 or 2 dice.\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  shoppingMall: {\r\n    name: shoppingMallName,\r\n    cost: shoppingMallCost,\r\n    render: (\r\n      <Landmark\r\n        title={shoppingMallName}\r\n        cost={shoppingMallCost}\r\n        description=\"Each of your bread and cup establishments earn +1 coin.\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  amusementPark: {\r\n    name: amusementParkName,\r\n    cost: amusementParkCost,\r\n    render: (\r\n      <Landmark\r\n        title={amusementParkName}\r\n        cost={amusementParkCost}\r\n        description=\"If you roll doubles, take another turn after this one.\"\r\n      />\r\n    ),\r\n  },\r\n\r\n  radioTower: {\r\n    name: radioTowerName,\r\n    cost: radioTowerCost,\r\n    render: (\r\n      <Landmark\r\n        title={radioTowerName}\r\n        cost={radioTowerCost}\r\n        description=\"Once every turn, you can choose to re-roll your dice.\"\r\n      />\r\n    ),\r\n  },\r\n};\r\n\r\nexport { landmarks };\r\n","import React from 'react';\r\nimport LandmarkPile from './LandmarkPile';\r\nimport { landmarks } from '../landmarks';\r\n\r\nconst PlayerLandmarkRow = ({\r\n  thisPlayersTurn,\r\n  playerIndex,\r\n  activePlayer,\r\n  landmarksCompleted,\r\n  currentPhase,\r\n  coins,\r\n  onBuyButtonClick,\r\n}) => {\r\n  return (\r\n    <>\r\n      <h3>Your Landmarks</h3>\r\n      <div className='row'>\r\n        <div className='column'>\r\n          <LandmarkPile\r\n            playerIndex={playerIndex}\r\n            activePlayer={activePlayer}\r\n            landmark={landmarks.trainStation}\r\n            landmarksCompleted={landmarksCompleted}\r\n            currentPhase={currentPhase}\r\n            coins={coins}\r\n            onBuyButtonClick={onBuyButtonClick}\r\n            thisPlayersTurn={thisPlayersTurn}\r\n          />\r\n        </div>\r\n        <div className='column'>\r\n          <LandmarkPile\r\n            playerIndex={playerIndex}\r\n            activePlayer={activePlayer}\r\n            landmark={landmarks.shoppingMall}\r\n            landmarksCompleted={landmarksCompleted}\r\n            currentPhase={currentPhase}\r\n            coins={coins}\r\n            onBuyButtonClick={onBuyButtonClick}\r\n            thisPlayersTurn={thisPlayersTurn}\r\n          />\r\n        </div>\r\n        <div className='column'>\r\n          <LandmarkPile\r\n            playerIndex={playerIndex}\r\n            activePlayer={activePlayer}\r\n            landmark={landmarks.amusementPark}\r\n            landmarksCompleted={landmarksCompleted}\r\n            currentPhase={currentPhase}\r\n            coins={coins}\r\n            onBuyButtonClick={onBuyButtonClick}\r\n            thisPlayersTurn={thisPlayersTurn}\r\n          />\r\n        </div>\r\n        <div className='column'>\r\n          <LandmarkPile\r\n            playerIndex={playerIndex}\r\n            activePlayer={activePlayer}\r\n            landmark={landmarks.radioTower}\r\n            landmarksCompleted={landmarksCompleted}\r\n            currentPhase={currentPhase}\r\n            coins={coins}\r\n            onBuyButtonClick={onBuyButtonClick}\r\n            thisPlayersTurn={thisPlayersTurn}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PlayerLandmarkRow;\r\n","import React from 'react';\r\nimport PlayerLandmarkRow from './PlayerLandmarkRow';\r\nimport {\r\n  getPlayerNumberFromIndex,\r\n  splitListIntoSublistsWithMaxLength,\r\n} from '../utils';\r\nimport { establishmentLookupTable } from '../establishments';\r\n\r\nconst Player = ({\r\n  thisPlayersTurn,\r\n  playerIndex,\r\n  establishments,\r\n  allPlayerCoins,\r\n  activePlayer,\r\n  landmarksCompleted,\r\n  currentPhase,\r\n  coins,\r\n  onBuyButtonClick,\r\n}) => {\r\n  establishments.sort((a, b) => a.sortOrder - b.sortOrder);\r\n\r\n  const establishmentMap = {};\r\n  establishments.forEach(\r\n    (establishment) => (establishmentMap[establishment.name] = 0)\r\n  );\r\n  establishments.forEach(\r\n    (establishment) => establishmentMap[establishment.name]++\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <h2>Player {getPlayerNumberFromIndex(playerIndex)}</h2>\r\n      <div>Coins: {allPlayerCoins[playerIndex]}</div>\r\n      <PlayerLandmarkRow\r\n        playerIndex={playerIndex}\r\n        activePlayer={activePlayer}\r\n        landmarksCompleted={landmarksCompleted}\r\n        currentPhase={currentPhase}\r\n        coins={coins}\r\n        onBuyButtonClick={onBuyButtonClick}\r\n        thisPlayersTurn={thisPlayersTurn}\r\n      />\r\n      <h3>Your Establishments</h3>\r\n      {splitListIntoSublistsWithMaxLength(\r\n        Object.entries(establishmentMap),\r\n        3\r\n      ).map((row, rowIndex) => (\r\n        <div key={rowIndex} className='row'>\r\n          {row.map((pair) => {\r\n            const establishmentName = pair[0];\r\n            const count = pair[1];\r\n            console.log(\r\n              `establishment name = ${establishmentName}, count = ${count}`\r\n            );\r\n            if (establishmentLookupTable[establishmentName] === undefined) {\r\n              console.log(\r\n                `${establishmentName} lookup is undefined! Crash incoming, hit the deck!`\r\n              );\r\n            }\r\n            if (count > 0) {\r\n              return (\r\n                <div key={establishmentName} className='column'>\r\n                  {establishmentLookupTable[establishmentName].render}\r\n                  <div>Count: {count}</div>\r\n                </div>\r\n              );\r\n            }\r\n            return null;\r\n          })}\r\n        </div>\r\n      ))}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","import openSocket from 'socket.io-client';\r\n\r\nconst port = 2000;\r\nconst socket = openSocket(`http://localhost:${port}`);\r\n\r\nconst emitStartGame = (roomId) => {\r\n  socket.emit('start game', roomId);\r\n};\r\n\r\nconst emitLaunchGameRoom = () => {\r\n  socket.emit('launch game room');\r\n};\r\n\r\nconst emitJoinGameRoom = (roomId) => {\r\n  socket.emit('join game room', roomId);\r\n};\r\n\r\nconst emitLeaveGameRoom = () => {\r\n  socket.emit('leave game room');\r\n};\r\n\r\nconst emitGameStateChanged = (gameState) => {\r\n  socket.emit('game state changed', gameState);\r\n};\r\n\r\nconst subscribeToLaunchGameRoom = (callback) => {\r\n  socket.on('game room launched', (roomId) => callback(roomId));\r\n};\r\n\r\nconst subscribeToChangeInGameRoomPlayers = (callback) => {\r\n  socket.on('change in game room players', (playerCount) =>\r\n    callback(playerCount)\r\n  );\r\n};\r\n\r\nconst subscribeToGameStarted = (callback) => {\r\n  socket.on('game started', (playersInRoom) => {\r\n    const playerIndex = playersInRoom.findIndex(\r\n      (socketId) => socketId === socket.id\r\n    );\r\n    callback(playerIndex);\r\n  });\r\n};\r\n\r\nconst subscribeToGameRoomJoinSuccess = (callback) => {\r\n  socket.on('game room join success', (playerCount, gameInProgress) =>\r\n    callback(playerCount, gameInProgress)\r\n  );\r\n};\r\n\r\nconst subscribeToGameRoomJoinFailed = (callback) => {\r\n  socket.on('game room join failed', callback);\r\n};\r\n\r\nconst subscribeToGameStateChanged = (callback) => {\r\n  socket.on('game state changed', (newGameState) => callback(newGameState));\r\n};\r\n\r\nconst unsubscribeFromLaunchGameRoom = () => {\r\n  socket.off('game room launched');\r\n};\r\n\r\nconst unsubscribeFromGameRoomJoinSuccess = () => {\r\n  socket.off('game room join success');\r\n};\r\n\r\nconst unsubscribeFromGameRoomJoinFailed = () => {\r\n  socket.off('game room join failed');\r\n};\r\n\r\nconst unsubscribeFromChangeInGameRoomPlayers = () => {\r\n  socket.off('change in game room players');\r\n};\r\n\r\nconst unsubscribeFromGameStarted = () => {\r\n  socket.off('game started');\r\n};\r\n\r\nconst unsubscribeFromGameStateChanged = () => {\r\n  socket.off('game state changed');\r\n};\r\n\r\nexport {\r\n  emitStartGame,\r\n  emitLaunchGameRoom,\r\n  emitJoinGameRoom,\r\n  emitLeaveGameRoom,\r\n  emitGameStateChanged,\r\n  subscribeToGameStarted,\r\n  subscribeToLaunchGameRoom,\r\n  subscribeToChangeInGameRoomPlayers,\r\n  subscribeToGameRoomJoinSuccess,\r\n  subscribeToGameRoomJoinFailed,\r\n  subscribeToGameStateChanged,\r\n  unsubscribeFromGameRoomJoinSuccess,\r\n  unsubscribeFromGameRoomJoinFailed,\r\n  unsubscribeFromLaunchGameRoom,\r\n  unsubscribeFromChangeInGameRoomPlayers,\r\n  unsubscribeFromGameStarted,\r\n  unsubscribeFromGameStateChanged,\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport BankEstablishmentPiles from './BankEstablishmentPiles';\r\nimport Dice from './Dice';\r\nimport PhaseIndicator from './PhaseIndicator';\r\nimport Player from './Player';\r\nimport {\r\n  establishments,\r\n  establishmentColors,\r\n  exchangeCoinsBetweenPlayers,\r\n  makeEstablishmentTransaction,\r\n} from '../establishments';\r\nimport { landmarks } from '../landmarks';\r\nimport {\r\n  emitGameStateChanged,\r\n  subscribeToGameStateChanged,\r\n  unsubscribeFromGameStateChanged,\r\n} from '../api';\r\nimport { getPlayerNumberFromIndex } from '../utils';\r\n\r\nconst turnPhases = {\r\n  rollDice: 0,\r\n  decideToReroll: 1,\r\n  earnIncome: 2,\r\n  construction: 3,\r\n  choosePlayerToStealCoinsFrom: 4,\r\n  chooseEstablishmentToSteal: 5,\r\n};\r\n\r\n// Leaving this outside of the Game component in case it needs to be exported\r\n// to another component\r\nconst changeGameState = (changedItems, setterMap, emitChangeInState = true) => {\r\n  Object.entries(changedItems).forEach((pair) => {\r\n    const itemName = pair[0];\r\n    const newValue = pair[1];\r\n    console.log(`changing ${itemName} to ${newValue}`);\r\n    const setter = setterMap[itemName];\r\n    if (setter !== undefined) {\r\n      setter(newValue);\r\n      console.log(`${itemName} changed`);\r\n    }\r\n  });\r\n  if (emitChangeInState) emitGameStateChanged(changedItems);\r\n};\r\n\r\nconst Game = ({ thisPlayerIndex, playerCount, endGame }) => {\r\n  const [activePlayer, setActivePlayer] = useState(0);\r\n  const [firstDieValue, setFirstDieValue] = useState(1);\r\n  const [secondDieValue, setSecondDieValue] = useState(0);\r\n  const [turnPhase, setTurnPhase] = useState(turnPhases.rollDice);\r\n  const [playerCoins, setPlayerCoins] = useState(Array(playerCount).fill(3));\r\n  const [diceCount, setDiceCount] = useState(1);\r\n  const [repeatingTurn, setRepeatingTurn] = useState(false);\r\n  const [\r\n    activePlayerHasNotRerolledThisTurn,\r\n    setActivePlayerHasNotRerolledThisTurn,\r\n  ] = useState(true);\r\n  const [playerEstablishments, setPlayerEstablishments] = useState(\r\n    Array(playerCount).fill([establishments.wheatField, establishments.bakery])\r\n  );\r\n  const [landmarksCompleted, setLandmarksCompleted] = useState(\r\n    Array(playerCount).fill([])\r\n  );\r\n  const [activatedEstablishments, setActivatedEstablishments] = useState([]);\r\n\r\n  useEffect(() => {\r\n    subscribeToGameStateChanged((changedItems) => {\r\n      changeGameState(changedItems, setterMap, false);\r\n    });\r\n    return unsubscribeFromGameStateChanged;\r\n  });\r\n\r\n  const setterMap = {};\r\n  setterMap['activePlayer'] = setActivePlayer;\r\n  setterMap['firstDieValue'] = setFirstDieValue;\r\n  setterMap['secondDieValue'] = setSecondDieValue;\r\n  setterMap['turnPhase'] = setTurnPhase;\r\n  setterMap['playerCoins'] = setPlayerCoins;\r\n  setterMap['diceCount'] = setDiceCount;\r\n  setterMap['repeatingTurn'] = setRepeatingTurn;\r\n  setterMap[\r\n    'activePlayerHasNotRerolledThisTurn'\r\n  ] = setActivePlayerHasNotRerolledThisTurn;\r\n  setterMap['playerEstablishments'] = setPlayerEstablishments;\r\n  setterMap['landmarksCompleted'] = setLandmarksCompleted;\r\n  setterMap['activatedEstablishments'] = setActivatedEstablishments;\r\n\r\n  const totalCoins = 282;\r\n  const bankCoins = totalCoins - playerCoins.reduce((a, b) => a + b);\r\n  const activePlayerCompletedRadioTower = landmarksCompleted[\r\n    activePlayer\r\n  ].includes(landmarks.radioTower);\r\n  const shoppingMallComplete = landmarksCompleted[activePlayer].includes(\r\n    landmarks.shoppingMall\r\n  );\r\n  const thisPlayersTurn = thisPlayerIndex === activePlayer;\r\n\r\n  const onDiceRoll = (firstDieValue, secondDieValue) => {\r\n    const amusementParkActivated = landmarksCompleted[activePlayer].includes(\r\n      landmarks.amusementPark\r\n    );\r\n    let newRepeatingTurn = false;\r\n\r\n    if (amusementParkActivated && firstDieValue === secondDieValue) {\r\n      /*setRepeatingTurn(true);*/\r\n      newRepeatingTurn = true;\r\n    }\r\n    if (activePlayerCompletedRadioTower && activePlayerHasNotRerolledThisTurn) {\r\n      /*setTurnPhase(turnPhases.decideToReroll);*/\r\n      changeGameState(\r\n        {\r\n          turnPhase: turnPhases.decideToReroll,\r\n          repeatingTurn: newRepeatingTurn,\r\n          firstDieValue: firstDieValue,\r\n          secondDieValue: secondDieValue,\r\n        },\r\n        setterMap\r\n      );\r\n      return;\r\n    }\r\n\r\n    /*setFirstDieValue(firstDieValue);\r\n    setSecondDieValue(secondDieValue);*/\r\n    const newState = beginEarnIncomePhase(firstDieValue + secondDieValue);\r\n    changeGameState(\r\n      {\r\n        turnPhase: newState.turnPhase,\r\n        repeatingTurn: newRepeatingTurn,\r\n        firstDieValue: firstDieValue,\r\n        secondDieValue: secondDieValue,\r\n        playerEstablishments: newState.playerEstablishments,\r\n        activatedEstablishments: newState.activatedEstablishments,\r\n        playerCoins: newState.playerCoins,\r\n      },\r\n      setterMap\r\n    );\r\n  };\r\n\r\n  const onAcceptReroll = () => {\r\n    /*setTurnPhase(turnPhases.rollDice);\r\n    setRepeatingTurn(false);\r\n    setActivePlayerHasNotRerolledThisTurn(false);*/\r\n    changeGameState(\r\n      {\r\n        turnPhase: turnPhases.rollDice,\r\n        repeatingTurn: false,\r\n        activePlayerHasNotRerolledThisTurn: false,\r\n      },\r\n      setterMap\r\n    );\r\n  };\r\n\r\n  const onDeclineReroll = () => {\r\n    beginEarnIncomePhase(firstDieValue + secondDieValue);\r\n  };\r\n\r\n  const beginEarnIncomePhase = (newRoll) => {\r\n    const newActivatedEstablishments = gatherActivatedEstablishments(newRoll);\r\n\r\n    return performTransactionsOnActivatedEstablishments(\r\n      {\r\n        playerCoins,\r\n        playerEstablishments,\r\n        turnPhase: turnPhases.construction,\r\n      },\r\n      newActivatedEstablishments\r\n    );\r\n  };\r\n\r\n  const gatherActivatedEstablishments = (newRoll) => {\r\n    // 1. Create collections for each establishment type\r\n    let newActivatedEstablishments = [];\r\n    const activatedEstablishmentsByColor = {};\r\n    activatedEstablishmentsByColor[establishmentColors.red] = [];\r\n    activatedEstablishmentsByColor[establishmentColors.blue] = [];\r\n    activatedEstablishmentsByColor[establishmentColors.green] = [];\r\n    activatedEstablishmentsByColor[establishmentColors.purple] = [];\r\n\r\n    playerEstablishments.forEach((ownedEstablishments, owner) =>\r\n      ownedEstablishments\r\n        .filter((establishment) =>\r\n          establishment.activationNum.includes(newRoll)\r\n        )\r\n        .forEach((establishment) => {\r\n          activatedEstablishmentsByColor[establishment.color].push({\r\n            establishment,\r\n            owner,\r\n          });\r\n        })\r\n    );\r\n\r\n    // 2. Put all activated establishments into one collection in order\r\n    newActivatedEstablishments = newActivatedEstablishments.concat(\r\n      activatedEstablishmentsByColor[establishmentColors.purple]\r\n    );\r\n    newActivatedEstablishments = newActivatedEstablishments.concat(\r\n      activatedEstablishmentsByColor[establishmentColors.green]\r\n    );\r\n    newActivatedEstablishments = newActivatedEstablishments.concat(\r\n      activatedEstablishmentsByColor[establishmentColors.blue]\r\n    );\r\n    newActivatedEstablishments = newActivatedEstablishments.concat(\r\n      activatedEstablishmentsByColor[establishmentColors.red]\r\n    );\r\n\r\n    return newActivatedEstablishments;\r\n  };\r\n\r\n  const performTransactionsOnActivatedEstablishments = (\r\n    newState,\r\n    newActivatedEstablishments\r\n  ) => {\r\n    while (\r\n      newActivatedEstablishments.length > 0 &&\r\n      newState.turnPhase === turnPhases.construction\r\n    ) {\r\n      const card = newActivatedEstablishments.pop();\r\n      newState = makeEstablishmentTransaction(\r\n        {\r\n          activePlayer,\r\n          owner: card.owner,\r\n          playerEstablishments: newState.playerEstablishments,\r\n          playerCoins: newState.playerCoins,\r\n          shoppingMallComplete,\r\n          turnPhase: turnPhases.construction,\r\n          activatedEstablishments: newActivatedEstablishments,\r\n        },\r\n        card.establishment\r\n      );\r\n    }\r\n\r\n    /*setPlayerEstablishments(newState.playerEstablishments);\r\n    setActivatedEstablishments(newState.activatedEstablishments);\r\n    setPlayerCoins(newState.playerCoins);\r\n    setTurnPhase(newState.turnPhase);*/\r\n    return newState;\r\n  };\r\n\r\n  const endTurn = () => {\r\n    let newActivePlayer =\r\n      activePlayer + 1 === playerCoins.length ? 0 : activePlayer + 1;\r\n    if (repeatingTurn) {\r\n      newActivePlayer = activePlayer;\r\n    }\r\n    changeGameState(\r\n      {\r\n        diceCount: 1,\r\n        activePlayer: newActivePlayer,\r\n        repeatingTurn: false,\r\n        activePlayerHasNotRerolledThisTurn: true,\r\n        turnPhase: turnPhases.rollDice,\r\n      },\r\n      setterMap\r\n    );\r\n  };\r\n\r\n  const buyEstablishment = (establishment) => {\r\n    playerEstablishments[activePlayer] = [\r\n      ...playerEstablishments[activePlayer],\r\n      establishment,\r\n    ];\r\n    playerCoins[activePlayer] -= establishment.cost;\r\n    /*setPlayerEstablishments(playerEstablishments);\r\n    setPlayerCoins(playerCoins);*/\r\n    changeGameState(\r\n      {\r\n        playerEstablishments: playerEstablishments,\r\n        playerCoins: playerCoins,\r\n      },\r\n      setterMap\r\n    );\r\n  };\r\n\r\n  const buyLandmark = (landmark) => {\r\n    landmarksCompleted[activePlayer] = [\r\n      ...landmarksCompleted[activePlayer],\r\n      landmark,\r\n    ];\r\n    if (landmarksCompleted[activePlayer].length >= 4) {\r\n      endGame(activePlayer);\r\n      return;\r\n    }\r\n    playerCoins[activePlayer] -= landmark.cost;\r\n    /*setLandmarksCompleted(landmarksCompleted);\r\n    setPlayerCoins(playerCoins);*/\r\n    changeGameState(\r\n      {\r\n        landmarksCompleted: landmarksCompleted,\r\n        playerCoins: playerCoins,\r\n      },\r\n      setterMap\r\n    );\r\n  };\r\n\r\n  const onStealeeChosen = (stealeeIndex) => {\r\n    const newGameState = exchangeCoinsBetweenPlayers(\r\n      {\r\n        shoppingMallComplete,\r\n        playerEstablishments,\r\n        playerCoins,\r\n        owner: activePlayer,\r\n        turnPhase: turnPhases.construction,\r\n      },\r\n      establishments.tvStation,\r\n      stealeeIndex\r\n    );\r\n    performTransactionsOnActivatedEstablishments(\r\n      newGameState,\r\n      activatedEstablishments\r\n    );\r\n  };\r\n\r\n  const tradeEstablishments = (\r\n    activePlayerEstablishment,\r\n    opponentEstablishment,\r\n    opponentIndex\r\n  ) => {\r\n    const newGameState = {\r\n      shoppingMallComplete,\r\n      playerCoins,\r\n      owner: activePlayer,\r\n      turnPhase: turnPhases.construction,\r\n    };\r\n\r\n    newGameState.playerEstablishments = replacePlayerEstablishment(\r\n      playerEstablishments,\r\n      activePlayerEstablishment,\r\n      opponentEstablishment,\r\n      activePlayer\r\n    );\r\n    newGameState.playerEstablishments = replacePlayerEstablishment(\r\n      newGameState.playerEstablishments,\r\n      opponentEstablishment,\r\n      activePlayerEstablishment,\r\n      opponentIndex\r\n    );\r\n\r\n    performTransactionsOnActivatedEstablishments(\r\n      newGameState,\r\n      activatedEstablishments\r\n    );\r\n  };\r\n\r\n  const replacePlayerEstablishment = (\r\n    newPlayerEstablishments,\r\n    establishmentOwned,\r\n    establishmentReceiving,\r\n    playerIndex\r\n  ) => {\r\n    newPlayerEstablishments[playerIndex].push(establishmentReceiving);\r\n\r\n    const establishmentOwnedIndex = newPlayerEstablishments[\r\n      playerIndex\r\n    ].findIndex(\r\n      (establishment) => establishment.name === establishmentOwned.name\r\n    );\r\n\r\n    newPlayerEstablishments[playerIndex].splice(establishmentOwnedIndex, 1);\r\n\r\n    return newPlayerEstablishments;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>You are player {getPlayerNumberFromIndex(thisPlayerIndex)}</h1>\r\n      <h2>Bank</h2>\r\n      <div>Coins: {bankCoins}</div>\r\n      <BankEstablishmentPiles\r\n        thisPlayersTurn={thisPlayersTurn}\r\n        activePlayerCoinCount={playerCoins[activePlayer]}\r\n        playerEstablishments={playerEstablishments}\r\n        turnPhase={turnPhase}\r\n        onBuyButtonClick={(establishment) => {\r\n          buyEstablishment(establishment);\r\n          endTurn();\r\n        }}\r\n      />\r\n      <PhaseIndicator\r\n        thisPlayersTurn={thisPlayersTurn}\r\n        allPlayerCoins={playerCoins}\r\n        allPlayerEstablishments={playerEstablishments}\r\n        activePlayer={activePlayer}\r\n        currentTurnPhase={turnPhase}\r\n        endTurn={endTurn}\r\n        repeatingTurn={repeatingTurn}\r\n        onAcceptReroll={onAcceptReroll}\r\n        onDeclineReroll={onDeclineReroll}\r\n        onStealeeChosen={onStealeeChosen}\r\n        onEstablishmentsToTradeChosen={tradeEstablishments}\r\n      />\r\n      <Dice\r\n        thisPlayersTurn={thisPlayersTurn}\r\n        diceCount={diceCount}\r\n        setDiceCount={setDiceCount}\r\n        firstDieValue={firstDieValue}\r\n        secondDieValue={secondDieValue}\r\n        onDiceRoll={onDiceRoll}\r\n        trainStationActivated={landmarksCompleted[activePlayer].includes(\r\n          landmarks.trainStation\r\n        )}\r\n        currentPhase={turnPhase}\r\n      />\r\n      <div className='row'>\r\n        {playerCoins.map((coins, index) => (\r\n          <div key={index} className='playerColumn'>\r\n            <Player\r\n              thisPlayersTurn={thisPlayersTurn}\r\n              playerIndex={index}\r\n              activePlayer={activePlayer}\r\n              coins={coins}\r\n              allPlayerCoins={playerCoins}\r\n              establishments={playerEstablishments[index]}\r\n              landmarksCompleted={landmarksCompleted}\r\n              currentPhase={turnPhase}\r\n              onBuyButtonClick={(landmark) => {\r\n                buyLandmark(landmark);\r\n                endTurn();\r\n              }}\r\n              activePlayerHasNotRerolledThisTurn={\r\n                activePlayerHasNotRerolledThisTurn\r\n              }\r\n            />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport { Game, turnPhases, changeGameState };\r\n","import React, { useEffect, useState } from 'react';\r\nimport { Game } from './Game';\r\nimport {\r\n  emitJoinGameRoom,\r\n  emitLeaveGameRoom,\r\n  emitStartGame,\r\n  subscribeToGameRoomJoinSuccess,\r\n  subscribeToGameRoomJoinFailed,\r\n  subscribeToChangeInGameRoomPlayers,\r\n  subscribeToGameStarted,\r\n  unsubscribeFromGameRoomJoinSuccess,\r\n  unsubscribeFromGameRoomJoinFailed,\r\n  unsubscribeFromChangeInGameRoomPlayers,\r\n  unsubscribeFromGameStarted,\r\n} from '../api';\r\nimport { Redirect, useParams, Link } from 'react-router-dom';\r\nimport { getPlayerNumberFromIndex } from '../utils';\r\n\r\nexport const GameRoom = () => {\r\n  const { roomId } = useParams();\r\n  const [winner, setWinner] = useState(-1);\r\n  const [thisPlayerIndex, setThisPlayerIndex] = useState(0);\r\n  const [gameNotFound, setGameNotFound] = useState(false);\r\n  const [gameInProgress, setGameInProgress] = useState(false);\r\n  const [gameRoomJoined, setGameRoomJoined] = useState(false);\r\n  const [currentPlayerCount, setCurrentPlayerCount] = useState(0);\r\n\r\n  useEffect(() => {\r\n    subscribeToGameRoomJoinSuccess((playerCount, gameInProgress) => {\r\n      setGameRoomJoined(true);\r\n      setCurrentPlayerCount(playerCount);\r\n      setGameInProgress(gameInProgress);\r\n      console.log('game room join success: playerCount === ', playerCount);\r\n    });\r\n\r\n    subscribeToGameRoomJoinFailed(() => {\r\n      setGameNotFound(true);\r\n      console.log('game room join failed');\r\n    });\r\n\r\n    subscribeToChangeInGameRoomPlayers((playerCount) => {\r\n      setCurrentPlayerCount(playerCount);\r\n      console.log(\r\n        'change in game room player count: playerCount === ',\r\n        playerCount\r\n      );\r\n    });\r\n\r\n    subscribeToGameStarted((playerIndex) => {\r\n      setGameInProgress(true);\r\n      setThisPlayerIndex(playerIndex);\r\n    });\r\n\r\n    if (!gameRoomJoined) {\r\n      console.log('joining game room');\r\n      emitJoinGameRoom(roomId);\r\n    }\r\n    return () => {\r\n      unsubscribeFromGameRoomJoinSuccess();\r\n      unsubscribeFromGameRoomJoinFailed();\r\n      unsubscribeFromChangeInGameRoomPlayers();\r\n      unsubscribeFromGameStarted();\r\n    };\r\n  });\r\n\r\n  const onStartGameClick = () => {\r\n    console.log('currentPlayerCount: ', currentPlayerCount);\r\n    emitStartGame(roomId);\r\n  };\r\n\r\n  const onGoHomeClick = () => {\r\n    emitLeaveGameRoom();\r\n  };\r\n\r\n  const endGame = (activePlayer) => {\r\n    setGameInProgress(false);\r\n    setWinner(activePlayer);\r\n  };\r\n\r\n  const winnerDeclared = winner >= 0;\r\n\r\n  return gameNotFound ? (\r\n    <Redirect to='/not-found' />\r\n  ) : gameInProgress ? (\r\n    <Game\r\n      thisPlayerIndex={thisPlayerIndex}\r\n      playerCount={currentPlayerCount}\r\n      endGame={endGame}\r\n    />\r\n  ) : (\r\n    <>\r\n      <h1>\r\n        {winnerDeclared\r\n          ? `Player ${getPlayerNumberFromIndex(winner)} wins`\r\n          : 'Welcome to your game room!'}\r\n      </h1>\r\n      <h2>Share your game room ID with your friends: {roomId}</h2>\r\n      <div>Player count: {currentPlayerCount}</div>\r\n      {currentPlayerCount < 2 ? (\r\n        <h3>Waiting for more players...</h3>\r\n      ) : (\r\n        <div>\r\n          <h3>\r\n            Ready to start!\r\n            {currentPlayerCount < 4\r\n              ? ' Or you can keep waiting for more players (max 4)'\r\n              : ''}\r\n          </h3>\r\n          <button onClick={onStartGameClick}>Start Game</button>\r\n        </div>\r\n      )}\r\n      <Link to='/home'>\r\n        <button className='homeButton' onClick={onGoHomeClick}>\r\n          Go to Home\r\n        </button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameRoom;\r\n","import React, { useState, useEffect } from 'react';\r\nimport {\r\n  emitLaunchGameRoom,\r\n  subscribeToLaunchGameRoom,\r\n  unsubscribeFromLaunchGameRoom,\r\n} from '../api';\r\nimport { Link, useHistory } from 'react-router-dom';\r\n\r\nexport const Home = () => {\r\n  const [roomId, setRoomId] = useState('');\r\n\r\n  useEffect(() => {\r\n    subscribeToLaunchGameRoom((roomId) => {\r\n      launchGameRoom(roomId);\r\n    });\r\n\r\n    return unsubscribeFromLaunchGameRoom;\r\n  });\r\n\r\n  let history = useHistory();\r\n\r\n  const onLaunchGameRoomClicked = () => {\r\n    emitLaunchGameRoom();\r\n  };\r\n\r\n  const launchGameRoom = (roomId) => {\r\n    console.log('launchGameRoom called');\r\n    console.log(`joining room ${roomId}`);\r\n    history.push(`/game/${roomId}`);\r\n  };\r\n\r\n  const onRoomIdChange = (event) => {\r\n    console.log('onRoomIdChange called');\r\n    setRoomId(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h1>Welcome to Machi Koro!</h1>\r\n      <h2>Join Game</h2>\r\n      <input\r\n        type='text'\r\n        value={roomId}\r\n        onChange={onRoomIdChange}\r\n        placeholder='Enter game ID...'\r\n      />\r\n      <Link to={`/game/${roomId}`}>\r\n        <button>Submit</button>\r\n      </Link>\r\n      <h2>Create New Game</h2>\r\n      <button onClick={onLaunchGameRoomClicked}>Launch Game Room</button>\r\n    </>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const GameNotFound = () => {\r\n  return (\r\n    <>\r\n      <h1>Game not found</h1>\r\n      <h3>Whoopsie doodle! Looks like that game doesn't exist.</h3>\r\n      <Link to='/'>Back to Home</Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default GameNotFound;\r\n","import React from 'react';\nimport { GameRoom } from './components/GameRoom';\nimport { Home } from './components/Home';\nimport { GameNotFound } from './components/GameNotFound';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\n\nexport const App = () => {\n  return (\n    <>\n      <Router>\n        <div>\n          <Switch>\n            <Route path='/not-found'>\n              <GameNotFound />\n            </Route>\n            <Route path='/game/:roomId'>\n              <GameRoom />\n            </Route>\n            <Route path='/home'>\n              <Home />\n            </Route>\n            <Redirect to='/home' />\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}